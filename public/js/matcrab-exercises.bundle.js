var Bundle=function(t){var n={};function r(e){if(n[e])return n[e].exports;var i=n[e]={i:e,l:!1,exports:{}};return t[e].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=t,r.c=n,r.d=function(t,n,e){r.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,n){if(1&n&&(t=r(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(r.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)r.d(e,i,function(n){return t[n]}.bind(null,i));return e},r.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(n,"a",n),n},r.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},r.p="",r(r.s=7)}([function(t,n,r){"use strict";var e;Object.defineProperty(n,"__esModule",{value:!0}),n.Color=n.MatlabMath=n.getQueryString=n.cloneArray=n.assert=n.asMutable=void 0,n.asMutable=function(t){return t},n.assert=function(t,n){if(void 0===n&&(n=""),!t)throw Error("Assert failed: "+n)},n.cloneArray=function(t){return t.slice()},n.getQueryString=function(){for(var t={},n=window.location.search.substring(1).split("&"),r=0;r<n.length;r++){var e=n[r].split("=");if(void 0===t[e[0]])t[e[0]]=decodeURIComponent(e[1]);else if("string"==typeof t[e[0]]){var i=[t[e[0]],decodeURIComponent(e[1])];t[e[0]]=i}else t[e[0]].push(decodeURIComponent(e[1]))}return t},function(t){var n=0;function r(t,n,r){void 0===n&&(n=0),void 0===r&&(r=1);var e=t%233280/233280;return e=n+e*(r-n),e=Math.max(n,Math.min(r,e))}t.setRandomSeed=function(t){n=t},t.random=function(t,e){return void 0===t&&(t=0),void 0===e&&(e=1),r(n=(9301*n+49297)%233280,t,e)},t.randomInteger=function(t,n){return t=Math.ceil(t),n=Math.floor(n),Math.floor(Math.random()*(n-t)+t)},t.randomIntegerInclusive=function(t,n){return t=Math.ceil(t),n=Math.floor(n),Math.floor(Math.random()*(n-t+1)+t)},t.seededRandom=r,t.range=function(t,n,r){void 0===r&&(r=1);for(var e=[];t<=n;)e.push(t),t+=r;return e}}(e=n.MatlabMath||(n.MatlabMath={})),function(t){t.WHITE="#FFFFFF",t.LIGHT_LETTERS="ABCDEF",t.toColor=function(t,n){void 0===n&&(n="123456789ABCDEF");for(var r=t.toString(),i=0,u=0;i<r.length;u=r.charCodeAt(i++)+((u<<5)-u));return function(t,n){void 0===n&&(n="123456789ABCDEF"),n=n||"0123456789ABCDEF";var r="#";e.setRandomSeed(t);for(var i=0;i<6;i++)r+=n[Math.floor(e.random()*n.length)];return r}(Math.abs(u),n)},t.randomColor=function(t){void 0===t&&(t="123456789ABCDEF"),t=t||"0123456789ABCDEF";for(var n="#",r=0;r<6;r++)n+=t[Math.floor(e.random()*t.length)];return n}}(n.Color||(n.Color={}))},function(t,n,r){"use strict";var e,i=this&&this.__extends||(e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(t,n)},function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)});Object.defineProperty(n,"__esModule",{value:!0}),n.parse=n.SyntaxError=void 0;var u=function(t){function n(r,e,i,u){var a=t.call(this)||this;return a.message=r,a.expected=e,a.found=i,a.location=u,a.name="SyntaxError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(a,n),a}return i(n,t),n.buildMessage=function(t,n){function r(t){return t.charCodeAt(0).toString(16).toUpperCase()}function e(t){return t.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,function(t){return"\\x0"+r(t)}).replace(/[\x10-\x1F\x7F-\x9F]/g,function(t){return"\\x"+r(t)})}function i(t){return t.replace(/\\/g,"\\\\").replace(/\]/g,"\\]").replace(/\^/g,"\\^").replace(/-/g,"\\-").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,function(t){return"\\x0"+r(t)}).replace(/[\x10-\x1F\x7F-\x9F]/g,function(t){return"\\x"+r(t)})}function u(t){switch(t.type){case"literal":return'"'+e(t.text)+'"';case"class":var n=t.parts.map(function(t){return Array.isArray(t)?i(t[0])+"-"+i(t[1]):i(t)});return"["+(t.inverted?"^":"")+n+"]";case"any":return"any character";case"end":return"end of input";case"other":return t.description}}return"Expected "+function(t){var n,r,e=t.map(u);if(e.sort(),e.length>0){for(n=1,r=1;n<e.length;n++)e[n-1]!==e[n]&&(e[r]=e[n],r++);e.length=r}switch(e.length){case 1:return e[0];case 2:return e[0]+" or "+e[1];default:return e.slice(0,-1).join(", ")+", or "+e[e.length-1]}}(t)+" but "+((a=n)?'"'+e(a)+'"':"end of input")+" found.";var a},n}(Error);n.SyntaxError=u,n.parse=function(t,n){n=void 0!==n?n:{};var r,e={},i={start:fn},a=fn,o=";",c=en(";",!1),s=/^[\n\r]/,l=un(["\n","\r"],!1,!1),f=function(t){return t},h=function(t){return 1===t.length?t[0]:{what:"statement_group",statements:t}},p="=",d=en("=",!1),v=function(t,n){return{what:"indexed_assignment",lhs:t,rhs:n}},g=function(t,n){return{what:"assignment",identifier:t,exp:n}},m="[",_=en("[",!1),y=/^[\r\n]/,b=un(["\r","\n"],!1,!1),w=function(t,n){return n},x="]",A=en("]",!1),C=function(t,n){return 0===n.length?t:(n.unshift(t),{what:"matrix_exp",rows:n})},S=",",I=en(",",!1),k=function(t,n){return n},E=function(t,n){return 0===n.length?t:(n.unshift(t),{what:"row_exp",cols:n})},T=":",M=en(":",!1),z=function(t,n,r){return r},j=function(t,n,r){return{what:"range_exp",start:t,end:r||n,step:r&&n||void 0}},O="|",$=en("|",!1),R=function(t,n,r){return[n,r]},L=function(t,n){return Mn(t,n,"left","or_exp")},V="&",N=en("&",!1),F=function(t,n){return Mn(t,n,"left","and_exp")},D="==",W=en("==",!1),U="~=",B=en("~=",!1),P=function(t,n){return Mn(t,n,"left","eq_exp")},H="<=",q=en("<=",!1),G="<",Z=en("<",!1),K=">=",J=en(">=",!1),Y=">",Q=en(">",!1),X=function(t,n){return Mn(t,n,"left","rel_exp")},tt="+",nt=en("+",!1),rt="-",et=en("-",!1),it=function(t,n){return Mn(t,n,"left","add_exp")},ut="*",at=en("*",!1),ot="/",ct=en("/",!1),st="^",lt=en("^",!1),ft=".*",ht=en(".*",!1),pt="./",dt=en("./",!1),vt=".^",gt=en(".^",!1),mt=function(t,n){return Mn(t,n,"left","mult_exp")},_t="~",yt=en("~",!1),bt=function(t,n){return{what:"unary_exp",sub:n,op:t}},wt="'",xt=en("'",!1),At=function(t,n){return{what:"transpose_exp",sub:t,transposes:n}},Ct="(",St=en("(",!1),It=function(t,n,r){return r},kt=")",Et=en(")",!1),Tt=function(t,n,r){return r.unshift(n),{what:"call_exp",target:t.identifier,args:r}},Mt="end",zt=en("end",!1),jt=function(){return{what:"end_exp"}},Ot=function(t){return t},$t=function(){return{what:"colon_exp"}},Rt=/^[0-9.]/,Lt=un([["0","9"],"."],!1,!1),Vt=function(t,n){return n.indexOf(".")==n.lastIndexOf(".")&&-1!=n.indexOf(".")},Nt=function(t,n){return{what:"float",value:parseFloat((t||"")+n.join(""))}},Ft=an("integer"),Dt=/^[0-9]/,Wt=un([["0","9"]],!1,!1),Ut=function(t,n){return{what:"integer",value:parseInt((t||"")+n.join(""),10)}},Bt=an("identifier"),Pt=function(t,n){return{what:"identifier",identifier:t+n.join("")}},Ht=/^[a-zA-Z0-9_]/,qt=un([["a","z"],["A","Z"],["0","9"],"_"],!1,!1),Gt=/^[a-zA-Z]/,Zt=un([["a","z"],["A","Z"]],!1,!1),Kt=an("whitespace"),Jt=/^[ \t]/,Yt=un([" ","\t"],!1,!1),Qt=0,Xt=[{line:1,column:1}],tn=0,nn=[],rn=0;if(void 0!==n.startRule){if(!(n.startRule in i))throw new Error("Can't start parsing from rule \""+n.startRule+'".');a=i[n.startRule]}function en(t,n){return{type:"literal",text:t,ignoreCase:n}}function un(t,n,r){return{type:"class",parts:t,inverted:n,ignoreCase:r}}function an(t){return{type:"other",description:t}}function on(n){var r,e=Xt[n];if(e)return e;for(r=n-1;!Xt[r];)r--;for(e={line:(e=Xt[r]).line,column:e.column};r<n;)10===t.charCodeAt(r)?(e.line++,e.column=1):e.column++,r++;return Xt[n]=e,e}function cn(t,n){var r=on(t),e=on(n);return{start:{offset:t,line:r.line,column:r.column},end:{offset:n,line:e.line,column:e.column}}}function sn(t){Qt<tn||(Qt>tn&&(tn=Qt,nn=[]),nn.push(t))}function ln(t,n,r){return new u(u.buildMessage(t,n),t,n,r)}function fn(){return function(){var n,r,i,u,a,p,d;if(n=Qt,(r=En())!==e){if(i=[],u=Qt,(a=hn())!==e){for(p=[],59===t.charCodeAt(Qt)?(d=o,Qt++):(d=e,0===rn&&sn(c)),d===e&&(s.test(t.charAt(Qt))?(d=t.charAt(Qt),Qt++):(d=e,0===rn&&sn(l)),d===e&&(d=Tn()));d!==e;)p.push(d),59===t.charCodeAt(Qt)?(d=o,Qt++):(d=e,0===rn&&sn(c)),d===e&&(s.test(t.charAt(Qt))?(d=t.charAt(Qt),Qt++):(d=e,0===rn&&sn(l)),d===e&&(d=Tn()));p!==e?(a=f(a),u=a):(Qt=u,u=e)}else Qt=u,u=e;for(;u!==e;)if(i.push(u),u=Qt,(a=hn())!==e){for(p=[],59===t.charCodeAt(Qt)?(d=o,Qt++):(d=e,0===rn&&sn(c)),d===e&&(s.test(t.charAt(Qt))?(d=t.charAt(Qt),Qt++):(d=e,0===rn&&sn(l)),d===e&&(d=Tn()));d!==e;)p.push(d),59===t.charCodeAt(Qt)?(d=o,Qt++):(d=e,0===rn&&sn(c)),d===e&&(s.test(t.charAt(Qt))?(d=t.charAt(Qt),Qt++):(d=e,0===rn&&sn(l)),d===e&&(d=Tn()));p!==e?(a=f(a),u=a):(Qt=u,u=e)}else Qt=u,u=e;i!==e?(r=h(i),n=r):(Qt=n,n=e)}else Qt=n,n=e;return n}()}function hn(){var n;return(n=function(){var n,r,i,u;return n=Qt,(r=An())!==e&&En()!==e?(61===t.charCodeAt(Qt)?(i=p,Qt++):(i=e,0===rn&&sn(d)),i!==e&&En()!==e&&(u=dn())!==e?(r=v(r,u),n=r):(Qt=n,n=e)):(Qt=n,n=e),n===e&&(n=Qt,(r=In())!==e&&En()!==e?(61===t.charCodeAt(Qt)?(i=p,Qt++):(i=e,0===rn&&sn(d)),i!==e&&En()!==e&&(u=dn())!==e?(r=g(r,u),n=r):(Qt=n,n=e)):(Qt=n,n=e)),n}())===e&&(n=dn()),n}function pn(){var n,r,i,u,a,o,c;if(n=Qt,(r=dn())!==e){for(i=[],u=Qt,a=Qt,(o=En())!==e?(44===t.charCodeAt(Qt)?(c=S,Qt++):(c=e,0===rn&&sn(I)),c!==e?a=o=[o,c]:(Qt=a,a=e)):(Qt=a,a=e),a===e&&(a=Tn()),a!==e&&(o=En())!==e&&(c=dn())!==e?u=a=k(r,c):(Qt=u,u=e);u!==e;)i.push(u),u=Qt,a=Qt,(o=En())!==e?(44===t.charCodeAt(Qt)?(c=S,Qt++):(c=e,0===rn&&sn(I)),c!==e?a=o=[o,c]:(Qt=a,a=e)):(Qt=a,a=e),a===e&&(a=Tn()),a!==e&&(o=En())!==e&&(c=dn())!==e?u=a=k(r,c):(Qt=u,u=e);i!==e?n=r=E(r,i):(Qt=n,n=e)}else Qt=n,n=e;return n}function dn(){var n;return(n=function(){var n,r,i,u,a,o,c,s;return n=Qt,(r=vn())!==e&&En()!==e?(58===t.charCodeAt(Qt)?(i=T,Qt++):(i=e,0===rn&&sn(M)),i!==e&&En()!==e&&(u=vn())!==e?(a=Qt,(o=En())!==e?(58===t.charCodeAt(Qt)?(c=T,Qt++):(c=e,0===rn&&sn(M)),c!==e&&En()!==e&&(s=vn())!==e?(o=z(r,u,s),a=o):(Qt=a,a=e)):(Qt=a,a=e),a===e&&(a=null),a!==e?(r=j(r,u,a),n=r):(Qt=n,n=e)):(Qt=n,n=e)):(Qt=n,n=e),n===e&&(n=vn()),n}())===e&&(n=An())===e&&(n=Cn()),n}function vn(){var n,r,i,u,a,o;if(n=Qt,(r=gn())!==e){for(i=[],u=Qt,En()!==e?(124===t.charCodeAt(Qt)?(a=O,Qt++):(a=e,0===rn&&sn($)),a!==e&&En()!==e&&(o=gn())!==e?u=R(r,a,o):(Qt=u,u=e)):(Qt=u,u=e);u!==e;)i.push(u),u=Qt,En()!==e?(124===t.charCodeAt(Qt)?(a=O,Qt++):(a=e,0===rn&&sn($)),a!==e&&En()!==e&&(o=gn())!==e?u=R(r,a,o):(Qt=u,u=e)):(Qt=u,u=e);i!==e?n=r=L(r,i):(Qt=n,n=e)}else Qt=n,n=e;return n}function gn(){var n,r,i,u,a,o;if(n=Qt,(r=mn())!==e){for(i=[],u=Qt,En()!==e?(38===t.charCodeAt(Qt)?(a=V,Qt++):(a=e,0===rn&&sn(N)),a!==e&&En()!==e&&(o=mn())!==e?u=R(r,a,o):(Qt=u,u=e)):(Qt=u,u=e);u!==e;)i.push(u),u=Qt,En()!==e?(38===t.charCodeAt(Qt)?(a=V,Qt++):(a=e,0===rn&&sn(N)),a!==e&&En()!==e&&(o=mn())!==e?u=R(r,a,o):(Qt=u,u=e)):(Qt=u,u=e);i!==e?n=r=F(r,i):(Qt=n,n=e)}else Qt=n,n=e;return n}function mn(){var n,r,i,u,a,o;if(n=Qt,(r=_n())!==e){for(i=[],u=Qt,En()!==e?(t.substr(Qt,2)===D?(a=D,Qt+=2):(a=e,0===rn&&sn(W)),a===e&&(t.substr(Qt,2)===U?(a=U,Qt+=2):(a=e,0===rn&&sn(B))),a!==e&&En()!==e&&(o=_n())!==e?u=R(r,a,o):(Qt=u,u=e)):(Qt=u,u=e);u!==e;)i.push(u),u=Qt,En()!==e?(t.substr(Qt,2)===D?(a=D,Qt+=2):(a=e,0===rn&&sn(W)),a===e&&(t.substr(Qt,2)===U?(a=U,Qt+=2):(a=e,0===rn&&sn(B))),a!==e&&En()!==e&&(o=_n())!==e?u=R(r,a,o):(Qt=u,u=e)):(Qt=u,u=e);i!==e?n=r=P(r,i):(Qt=n,n=e)}else Qt=n,n=e;return n}function _n(){var n,r,i,u,a,o;if(n=Qt,(r=yn())!==e){for(i=[],u=Qt,En()!==e?(t.substr(Qt,2)===H?(a=H,Qt+=2):(a=e,0===rn&&sn(q)),a===e&&(60===t.charCodeAt(Qt)?(a=G,Qt++):(a=e,0===rn&&sn(Z)),a===e&&(t.substr(Qt,2)===K?(a=K,Qt+=2):(a=e,0===rn&&sn(J)),a===e&&(62===t.charCodeAt(Qt)?(a=Y,Qt++):(a=e,0===rn&&sn(Q))))),a!==e&&En()!==e&&(o=yn())!==e?u=R(r,a,o):(Qt=u,u=e)):(Qt=u,u=e);u!==e;)i.push(u),u=Qt,En()!==e?(t.substr(Qt,2)===H?(a=H,Qt+=2):(a=e,0===rn&&sn(q)),a===e&&(60===t.charCodeAt(Qt)?(a=G,Qt++):(a=e,0===rn&&sn(Z)),a===e&&(t.substr(Qt,2)===K?(a=K,Qt+=2):(a=e,0===rn&&sn(J)),a===e&&(62===t.charCodeAt(Qt)?(a=Y,Qt++):(a=e,0===rn&&sn(Q))))),a!==e&&En()!==e&&(o=yn())!==e?u=R(r,a,o):(Qt=u,u=e)):(Qt=u,u=e);i!==e?n=r=X(r,i):(Qt=n,n=e)}else Qt=n,n=e;return n}function yn(){var n,r,i,u,a,o;if(n=Qt,(r=bn())!==e){for(i=[],u=Qt,En()!==e?(43===t.charCodeAt(Qt)?(a=tt,Qt++):(a=e,0===rn&&sn(nt)),a===e&&(45===t.charCodeAt(Qt)?(a=rt,Qt++):(a=e,0===rn&&sn(et))),a!==e&&En()!==e&&(o=bn())!==e?u=R(r,a,o):(Qt=u,u=e)):(Qt=u,u=e);u!==e;)i.push(u),u=Qt,En()!==e?(43===t.charCodeAt(Qt)?(a=tt,Qt++):(a=e,0===rn&&sn(nt)),a===e&&(45===t.charCodeAt(Qt)?(a=rt,Qt++):(a=e,0===rn&&sn(et))),a!==e&&En()!==e&&(o=bn())!==e?u=R(r,a,o):(Qt=u,u=e)):(Qt=u,u=e);i!==e?n=r=it(r,i):(Qt=n,n=e)}else Qt=n,n=e;return n}function bn(){var n,r,i,u,a,o;if(n=Qt,(r=wn())!==e){for(i=[],u=Qt,En()!==e?(42===t.charCodeAt(Qt)?(a=ut,Qt++):(a=e,0===rn&&sn(at)),a===e&&(47===t.charCodeAt(Qt)?(a=ot,Qt++):(a=e,0===rn&&sn(ct)),a===e&&(94===t.charCodeAt(Qt)?(a=st,Qt++):(a=e,0===rn&&sn(lt)),a===e&&(t.substr(Qt,2)===ft?(a=ft,Qt+=2):(a=e,0===rn&&sn(ht)),a===e&&(t.substr(Qt,2)===pt?(a=pt,Qt+=2):(a=e,0===rn&&sn(dt)),a===e&&(t.substr(Qt,2)===vt?(a=vt,Qt+=2):(a=e,0===rn&&sn(gt))))))),a!==e&&En()!==e&&(o=wn())!==e?u=R(r,a,o):(Qt=u,u=e)):(Qt=u,u=e);u!==e;)i.push(u),u=Qt,En()!==e?(42===t.charCodeAt(Qt)?(a=ut,Qt++):(a=e,0===rn&&sn(at)),a===e&&(47===t.charCodeAt(Qt)?(a=ot,Qt++):(a=e,0===rn&&sn(ct)),a===e&&(94===t.charCodeAt(Qt)?(a=st,Qt++):(a=e,0===rn&&sn(lt)),a===e&&(t.substr(Qt,2)===ft?(a=ft,Qt+=2):(a=e,0===rn&&sn(ht)),a===e&&(t.substr(Qt,2)===pt?(a=pt,Qt+=2):(a=e,0===rn&&sn(dt)),a===e&&(t.substr(Qt,2)===vt?(a=vt,Qt+=2):(a=e,0===rn&&sn(gt))))))),a!==e&&En()!==e&&(o=wn())!==e?u=R(r,a,o):(Qt=u,u=e)):(Qt=u,u=e);i!==e?n=r=mt(r,i):(Qt=n,n=e)}else Qt=n,n=e;return n}function wn(){var n,r,i;return(n=xn())===e&&(n=Qt,43===t.charCodeAt(Qt)?(r=tt,Qt++):(r=e,0===rn&&sn(nt)),r===e&&(45===t.charCodeAt(Qt)?(r=rt,Qt++):(r=e,0===rn&&sn(et)),r===e&&(126===t.charCodeAt(Qt)?(r=_t,Qt++):(r=e,0===rn&&sn(yt)))),r!==e&&En()!==e&&(i=xn())!==e?n=r=bt(r,i):(Qt=n,n=e)),n}function xn(){var n,r,i,u;if(n=Qt,(r=Cn())===e&&(r=An()),r!==e)if(En()!==e){if(i=[],39===t.charCodeAt(Qt)?(u=wt,Qt++):(u=e,0===rn&&sn(xt)),u!==e)for(;u!==e;)i.push(u),39===t.charCodeAt(Qt)?(u=wt,Qt++):(u=e,0===rn&&sn(xt));else i=e;i!==e?n=r=At(r,i):(Qt=n,n=e)}else Qt=n,n=e;else Qt=n,n=e;return n===e&&(n=An())===e&&(n=Cn()),n}function An(){var n,r,i,u,a,o,c,s,l;if(n=Qt,(r=In())!==e)if(En()!==e)if(40===t.charCodeAt(Qt)?(i=Ct,Qt++):(i=e,0===rn&&sn(St)),i!==e)if(En()!==e)if((u=Sn())!==e){for(a=[],o=Qt,(c=En())!==e?(44===t.charCodeAt(Qt)?(s=S,Qt++):(s=e,0===rn&&sn(I)),s!==e&&En()!==e&&(l=Sn())!==e?o=c=It(r,u,l):(Qt=o,o=e)):(Qt=o,o=e);o!==e;)a.push(o),o=Qt,(c=En())!==e?(44===t.charCodeAt(Qt)?(s=S,Qt++):(s=e,0===rn&&sn(I)),s!==e&&En()!==e&&(l=Sn())!==e?o=c=It(r,u,l):(Qt=o,o=e)):(Qt=o,o=e);a!==e&&(o=En())!==e?(41===t.charCodeAt(Qt)?(c=kt,Qt++):(c=e,0===rn&&sn(Et)),c!==e?n=r=Tt(r,u,a):(Qt=n,n=e)):(Qt=n,n=e)}else Qt=n,n=e;else Qt=n,n=e;else Qt=n,n=e;else Qt=n,n=e;else Qt=n,n=e;return n}function Cn(){var n,r,i,u;return(n=function(){var n,r,i,u,a,s,l,f,h;if(n=Qt,91===t.charCodeAt(Qt)?(r=m,Qt++):(r=e,0===rn&&sn(_)),r!==e)if(En()!==e)if((i=pn())!==e){if(u=[],a=Qt,(s=En())!==e){if(l=[],59===t.charCodeAt(Qt)?(f=o,Qt++):(f=e,0===rn&&sn(c)),f===e&&(y.test(t.charAt(Qt))?(f=t.charAt(Qt),Qt++):(f=e,0===rn&&sn(b))),f!==e)for(;f!==e;)l.push(f),59===t.charCodeAt(Qt)?(f=o,Qt++):(f=e,0===rn&&sn(c)),f===e&&(y.test(t.charAt(Qt))?(f=t.charAt(Qt),Qt++):(f=e,0===rn&&sn(b)));else l=e;l!==e&&(f=En())!==e&&(h=pn())!==e?a=s=w(i,h):(Qt=a,a=e)}else Qt=a,a=e;for(;a!==e;)if(u.push(a),a=Qt,(s=En())!==e){if(l=[],59===t.charCodeAt(Qt)?(f=o,Qt++):(f=e,0===rn&&sn(c)),f===e&&(y.test(t.charAt(Qt))?(f=t.charAt(Qt),Qt++):(f=e,0===rn&&sn(b))),f!==e)for(;f!==e;)l.push(f),59===t.charCodeAt(Qt)?(f=o,Qt++):(f=e,0===rn&&sn(c)),f===e&&(y.test(t.charAt(Qt))?(f=t.charAt(Qt),Qt++):(f=e,0===rn&&sn(b)));else l=e;l!==e&&(f=En())!==e&&(h=pn())!==e?a=s=w(i,h):(Qt=a,a=e)}else Qt=a,a=e;u!==e&&(a=En())!==e?(93===t.charCodeAt(Qt)?(s=x,Qt++):(s=e,0===rn&&sn(A)),s!==e?n=r=C(i,u):(Qt=n,n=e)):(Qt=n,n=e)}else Qt=n,n=e;else Qt=n,n=e;else Qt=n,n=e;return n}())===e&&(n=Qt,t.substr(Qt,3)===Mt?(r=Mt,Qt+=3):(r=e,0===rn&&sn(zt)),r!==e&&(r=jt()),(n=r)===e&&(n=In())===e&&(n=function(){var n;return(n=function(){var n,r,i,u;if(n=Qt,45===t.charCodeAt(Qt)?(r=rt,Qt++):(r=e,0===rn&&sn(et)),r===e&&(r=null),r!==e){if(i=[],Rt.test(t.charAt(Qt))?(u=t.charAt(Qt),Qt++):(u=e,0===rn&&sn(Lt)),u!==e)for(;u!==e;)i.push(u),Rt.test(t.charAt(Qt))?(u=t.charAt(Qt),Qt++):(u=e,0===rn&&sn(Lt));else i=e;i!==e&&(u=(u=Vt(r,i))?void 0:e)!==e?(r=Nt(r,i),n=r):(Qt=n,n=e)}else Qt=n,n=e;return n}())===e&&(n=function(){var n,r,i,u;if(rn++,n=Qt,45===t.charCodeAt(Qt)?(r=rt,Qt++):(r=e,0===rn&&sn(et)),r===e&&(r=null),r!==e){if(i=[],Dt.test(t.charAt(Qt))?(u=t.charAt(Qt),Qt++):(u=e,0===rn&&sn(Wt)),u!==e)for(;u!==e;)i.push(u),Dt.test(t.charAt(Qt))?(u=t.charAt(Qt),Qt++):(u=e,0===rn&&sn(Wt));else i=e;i!==e?(r=Ut(r,i),n=r):(Qt=n,n=e)}else Qt=n,n=e;return rn--,n===e&&(r=e,0===rn&&sn(Ft)),n}()),n}())===e&&(n=Qt,40===t.charCodeAt(Qt)?(r=Ct,Qt++):(r=e,0===rn&&sn(St)),r!==e&&En()!==e&&(i=dn())!==e&&En()!==e?(41===t.charCodeAt(Qt)?(u=kt,Qt++):(u=e,0===rn&&sn(Et)),u!==e?n=r=Ot(i):(Qt=n,n=e)):(Qt=n,n=e))),n}function Sn(){var n,r;return n=Qt,58===t.charCodeAt(Qt)?(r=T,Qt++):(r=e,0===rn&&sn(M)),r!==e&&(r=$t()),(n=r)===e&&(n=dn()),n}function In(){var n,r,i,u;if(rn++,n=Qt,(r=function(){var n;return Gt.test(t.charAt(Qt))?(n=t.charAt(Qt),Qt++):(n=e,0===rn&&sn(Zt)),n}())!==e){for(i=[],u=kn();u!==e;)i.push(u),u=kn();i!==e?n=r=Pt(r,i):(Qt=n,n=e)}else Qt=n,n=e;return rn--,n===e&&(r=e,0===rn&&sn(Bt)),n}function kn(){var n;return Ht.test(t.charAt(Qt))?(n=t.charAt(Qt),Qt++):(n=e,0===rn&&sn(qt)),n}function En(){var n,r;for(rn++,n=[],Jt.test(t.charAt(Qt))?(r=t.charAt(Qt),Qt++):(r=e,0===rn&&sn(Yt));r!==e;)n.push(r),Jt.test(t.charAt(Qt))?(r=t.charAt(Qt),Qt++):(r=e,0===rn&&sn(Yt));return rn--,n===e&&(r=e,0===rn&&sn(Kt)),n}function Tn(){var n,r;if(rn++,n=[],Jt.test(t.charAt(Qt))?(r=t.charAt(Qt),Qt++):(r=e,0===rn&&sn(Yt)),r!==e)for(;r!==e;)n.push(r),Jt.test(t.charAt(Qt))?(r=t.charAt(Qt),Qt++):(r=e,0===rn&&sn(Yt));else n=e;return rn--,n===e&&(r=e,0===rn&&sn(Kt)),n}function Mn(t,n,r,e){if(r=r||"left",e=e||"binaryOp",!n||0===n.length)return t;if("left"===r){var i=n.pop();return{what:e,op:i[0],left:Mn(t,n,r,e),right:i[1],associativity:r}}var u=n.shift();return{what:e,op:u[0],left:t,right:Mn(u[1],n,r,e),associativity:r}}if((r=a())!==e&&Qt===t.length)return r;throw r!==e&&Qt<t.length&&sn({type:"end"}),ln(nn,tn<t.length?t.charAt(tn):null,tn<t.length?cn(tn,tn+1):cn(tn,tn))}},function(t,n,r){"use strict";var e,i=this&&this.__extends||(e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(t,n)},function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)});Object.defineProperty(n,"__esModule",{value:!0}),n.EndExpression=n.IdentifierExpression=n.LiteralExpression=n.TransposeExpression=n.UnaryOperatorExpression=n.StatementGroup=n.Assignment=n.Expression=n.allSuccess=n.CodeConstruct=n.ImshowFigure=n.Environment=n.MatlabFunction=n.Variable=n.Matrix=n.MatlabError=void 0;var u=r(0),a=r(3),o=function(){return function(t,n){this.message=n,this.construct=t}}();n.MatlabError=o;var c=function(){function t(t,n,r,e){this.numDims=2,this.rows=t,this.cols=n,this.height=t,this.width=n,this.numel=t*n,this.data=u.cloneArray(r),this.dataType=e,this.isScalar=1===t&&1===n,this.isVector=1===t||1===n,this.color=u.Color.toColor([this.rows,this.height,this.data],u.Color.LIGHT_LETTERS)}return t.formatNumber=function(t){return Math.trunc(t)==t?t.toString():t.toPrecision(2)},t.scalar=function(n,r){return new t(1,1,[n],r)},t.createSized=function(n,r,e){return new t(n,r,new Array(n*r),e)},t.prototype.toString=function(){return"Rows: "+this.rows+" Cols: "+this.cols+"\nData: "+JSON.stringify(this.data)},t.prototype.clone=function(){return new t(this.rows,this.cols,this.data.slice(),this.dataType)},t.prototype.equals=function(t){return this.width===t.width&&this.height===t.height&&this.data.every(function(n,r){return n===t.data[r]})},t.prototype.linearIndex=function(t,n){return t-=1,(n-=1)*this.rows+t+1},t.prototype.atLinear=function(t){return this.data[t-1]},t.prototype.setLinear=function(t,n){return this.data[t-1]=n,this},t.prototype.at=function(t,n){return t-=1,n-=1,this.data[n*this.rows+t]},t.prototype.setAt=function(t,n,r){return t-=1,n-=1,this.data[n*this.rows+t]=r,this},t.prototype.fill=function(t){for(var n=0;n<this.data.length;++n)this.data[n]=t;return this},t.prototype.setAll=function(t){u.assert(this.data.length===t.length,"new data must have same number of elements");for(var n=0;n<this.data.length;++n)this.data[n]=t[n];return this},t.prototype.operateAll=function(t){this.setAll(this.data.map(t))},t.prototype.length=function(t){return 1===t?this.rows:this.cols},t.prototype.scalarValue=function(){return this.data[0]},t.prototype.contains=function(t){return-1!==this.data.indexOf(t)},t.prototype.colData=function(t){return this.data.slice((t-1)*this.rows,t*this.rows)},t.prototype.setColData=function(t,n){for(var r=1,e=0;r<=this.rows;++r)this.setAt(r,t,n[e++])},t.prototype.rowData=function(t){var n=this;return a.range(1,this.cols+1).map(function(r){return n.at(t,r)})},t.prototype.setRowData=function(t,n){for(var r=1,e=0;r<=this.cols;++r)this.setAt(t,r,n[e++])},t.prototype.accumulateCols=function(n){var r=this;return new t(1,this.cols,a.range(1,this.cols+1).map(function(t){return r.colData(t).reduce(n)}),"double")},t.prototype.accumulateRows=function(n){var r=this;return new t(this.rows,1,a.range(1,this.rows+1).map(function(t){return r.rowData(t).reduce(n)}),"double")},t.prototype.visualize_html=function(n){var r=$("<table></table>");r.addClass("matlab-table"),"logical"!==this.dataType&&r.css("background-color",this.color);for(var e=1;e<=this.rows;++e){var i=$("<tr></tr>");r.append(i);for(var u=1;u<=this.cols;++u){var a=$("<td class='matlab-matrix-cell'></td>"),o=$("<div></div>");o.addClass("matlab-scalar"),"logical"===this.dataType&&a.addClass(this.at(e,u)?"logical-1":"logical-0");var c=$("<span></span>");c.html(t.formatNumber(this.at(e,u))),o.append(c),a.append(o),i.append(a)}}return r[0].outerHTML},t}();n.Matrix=c;var s=function(){return function(){}}(),l=function(t){function n(n,r){var e=t.call(this)||this;return e.rowIndexer=n,e.colIndexer=r,e}return i(n,t),n.create=function(t,r){return new n(f.create(1,t),f.create(2,r))},n.prototype.indexingText=function(){return"("+this.rowIndexer.indexingText()+", "+this.colIndexer.indexingText()+")"},n.prototype.visualize_selection=function(t){var n=$("<table></table>");n.addClass("matlab-index");var r=new Set(this.rowIndexer.getSelectedIndices(t)),e=new Set(this.colIndexer.getSelectedIndices(t)),i=$("<tr></tr>").appendTo(n);i.append($("<td></td>"));for(var u=1;u<=t.cols;++u){var a=$("<td class='matlab-column-index'>"+u+"</td>").appendTo(i);e.has(u)&&a.addClass("selected")}for(var o=1;o<=t.rows;++o){var c=$("<tr></tr>");n.append(c);var s=$("<td class='matlab-row-index'>"+o+"</td>").appendTo(c);r.has(o)&&s.addClass("selected");for(var l=1;l<=t.cols;++l){var f=$("<td class='matlab-matrix-cell'><div class='highlight'></div></td>");f.css("background-color",t.color),r.has(o)&&e.has(l)&&f.addClass("selected");var h=$("<div></div>");h.addClass("matlab-scalar");var p=$("<span></span>");p.html(""+t.at(o,l)),h.append(p),f.append(h),c.append(f)}}return n[0].outerHTML},n.prototype.readValue=function(t){var n=[],r=this.rowIndexer.getSelectedIndices(t),e=this.colIndexer.getSelectedIndices(t);return e.forEach(function(e){r.forEach(function(r){n.push(t.at(r,e))})}),new c(r.length,e.length,n,t.dataType)},n.prototype.assign=function(t,n){var r=this.rowIndexer.getSelectedIndices(t),e=this.colIndexer.getSelectedIndices(t),i=r.length,u=e.length,a=i*u;if(n.isScalar)e.forEach(function(e,i){r.forEach(function(r,i){t.setAt(r,e,n.scalarValue())})});else{if(!(i===n.rows&&u===n.cols||(1===i||1===u)&&n.isVector&&a==n.numel))throw"Subscripted assignment dimension mismatch. The left hand side indexing expression selects a "+i+"x"+u+" while the right hand side is a "+n.rows+"x"+n.cols+".";var o=1;e.forEach(function(e,i){r.forEach(function(r,i){t.setAt(r,e,n.atLinear(o++))})})}},n.prototype.verify=function(t){this.rowIndexer.verify(t),this.colIndexer.verify(t)},n}(s),f=function(){function t(t){this.dimension=t}return t.create=function(t,n){return":"===n?new p(t):"logical"===n.dataType?new d(t,n):new h(t,n)},t.DIMENSION_NAMES=["","row","column"],t}(),h=function(t){function n(n,r){var e=t.call(this,n)||this;return e.selectedIndices=r.data,e}return i(n,t),n.prototype.getSelectedIndices=function(t){return this.selectedIndices},n.prototype.indexingText=function(){return this.selectedIndices.join(",")},n.prototype.verify=function(t){var n=this,r=t.length(this.dimension);this.selectedIndices.forEach(function(t){if(t<1||r<t)throw f.DIMENSION_NAMES[n.dimension]+" index "+t+" is out of bounds for the source matrix."})},n}(f),p=function(t){function n(n){return t.call(this,n)||this}return i(n,t),n.prototype.getSelectedIndices=function(t){return u.MatlabMath.range(1,t.length(this.dimension))},n.prototype.indexingText=function(){return":"},n.prototype.verify=function(t){},n}(f),d=function(t){function n(n,r){var e=t.call(this,n)||this,i=[];return r.data.forEach(function(t,n){return t&&i.push(n+1)}),e.selectedIndices=i,e.logicalSelection=r,e}return i(n,t),n.prototype.getSelectedIndices=function(t){return this.selectedIndices},n.prototype.indexingText=function(){return"logical"},n.prototype.verify=function(t){var n=this.logicalSelection.numel,r=t.length(this.dimension);if(n>r)throw"Logical index matrix to select "+f.DIMENSION_NAMES[this.dimension]+"s has "+n+" elements, but source matrix only has "+r+f.DIMENSION_NAMES[this.dimension]+"s."},n}(f),v=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return i(n,t),n.create=function(t){return":"===t?new m:"logical"===t.dataType?new _(t):new g(t)},n}(s),g=function(t){function n(n){var r=t.call(this)||this;return r.selectedIndices=n,r}return i(n,t),n.prototype.verify=function(t){this.selectedIndices.data.forEach(function(n){if(n<1||t.numel<n)throw"Index "+n+" is out of bounds for the source matrix."})},n.prototype.readValue=function(t){return new c(this.selectedIndices.rows,this.selectedIndices.cols,this.selectedIndices.data.map(function(n){return t.atLinear(n)}),t.dataType)},n.prototype.assign=function(t,n){if(n.isScalar){var r=n.scalarValue();this.selectedIndices.data.forEach(function(n){t.setLinear(n,r)})}else{if(this.selectedIndices.numel!=n.numel)throw"The length of the RHS matrix ("+n.numel+") does not match the number of indices selected from the matrix on the LHS ("+this.selectedIndices.numel+").";this.selectedIndices.data.forEach(function(r,e){t.setLinear(r,n.atLinear(e))})}},n.prototype.indexingText=function(){return"("+this.selectedIndices.data.join(",")+")"},n.prototype.visualize_selection=function(t){var n=$("<table></table>");n.addClass("matlab-index"),n.css("background-color",t.color);for(var r=new Set(this.selectedIndices.data),e=1;e<=t.rows;++e){var i=$("<tr></tr>");n.append(i);for(var u=1;u<=t.cols;++u){var a=$("<td class='matlab-matrix-cell'><div class='highlight'></div></td>");r.has(t.linearIndex(e,u))&&a.addClass("selected");var o=$("<div></div>");o.addClass("matlab-raw-index"),o.html(""+t.linearIndex(e,u)),a.append(o);var c=$("<div></div>");c.addClass("matlab-scalar");var s=$("<span></span>");s.html(""+t.at(e,u)),c.append(s),a.append(c),i.append(a)}}return n[0].outerHTML},n}(v),m=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return i(n,t),n.prototype.verify=function(t){},n.prototype.readValue=function(t){return new c(t.numel,1,t.data,t.dataType)},n.prototype.assign=function(t,n){if(n.isScalar)t.fill(n.scalarValue());else{if(t.numel!=n.numel)throw"The length of the RHS matrix ("+n.numel+") does not match the number of indices selected from the matrix on the LHS ("+t.numel+").";t.setAll(n.data)}},n.prototype.indexingText=function(){return"(:)"},n.prototype.visualize_selection=function(t){var n=$("<table></table>");n.addClass("matlab-index"),n.css("background-color",t.color);for(var r=1;r<=t.rows;++r){var e=$("<tr></tr>");n.append(e);for(var i=1;i<=t.cols;++i){var u=$("<td class='matlab-matrix-cell'><div class='highlight'></div></td>");u.addClass("selected");var a=$("<div></div>");a.addClass("matlab-raw-index"),a.html(""+t.linearIndex(r,i)),u.append(a);var o=$("<div></div>");o.addClass("matlab-scalar");var c=$("<span></span>");c.html(""+t.at(r,i)),o.append(c),u.append(o),e.append(u)}}return n[0].outerHTML},n}(v),_=function(t){function n(n){var r=t.call(this)||this;r.logicalSelection=n,u.assert("logical"===n.dataType);var e=[];return n.data.forEach(function(t,n){return t&&e.push(n+1)}),r.selectedIndices=e,r}return i(n,t),n.prototype.verify=function(t){var n=this.logicalSelection.numel,r=t.numel;if(n>r)throw"Logical index matrix has "+n+" elements, but source matrix only has "+r+" elements."},n.prototype.readValue=function(t){var n=this.selectedIndices.map(function(n){return t.atLinear(n)});return 1===this.logicalSelection.rows?new c(1,n.length,n,t.dataType):new c(n.length,1,n,t.dataType)},n.prototype.assign=function(t,n){if(n.isScalar){var r=n.scalarValue();this.selectedIndices.forEach(function(n){return t.setLinear(n,r)})}else{if(this.selectedIndices.length!==n.numel)throw"The number of elements in the RHS matrix ("+n.numel+") does not match the number of selected elements in the logically indexed matrix on the LHS ("+this.selectedIndices.length+").";this.selectedIndices.forEach(function(r,e){return t.setLinear(r,n.data[e])})}},n.prototype.indexingText=function(){return"(logical)"},n.prototype.visualize_selection=function(t){var n=$("<table></table>");n.addClass("matlab-index"),n.css("background-color",t.color);for(var r=new Set(this.selectedIndices),e=1;e<=t.rows;++e){var i=$("<tr></tr>");n.append(i);for(var u=1;u<=t.cols;++u){var a=$("<td class='matlab-matrix-cell'><div class='highlight'></div></td>"),o=r.has(t.linearIndex(e,u));o&&a.addClass("selected");var c=$("<div></div>");c.addClass("matlab-raw-index"),c.html(o?"1":"0"),a.append(c);var s=$("<div></div>");s.addClass("matlab-scalar");var l=$("<span></span>");l.html(""+t.at(e,u)),s.append(l),a.append(s),i.append(a)}}return n[0].outerHTML},n}(v),y=function(){function t(t,n){this.name=t,this.value=n,this.elem=$('<li class="list-group-item"><span class="badge matlab-var-badge">'+t+"</span></li>").prepend(this.valueElem=$('<span class="matlab-var-holder"></span>')),this.refresh()}return t.prototype.refresh=function(){var t=this.elem.find(".matlab-var-holder");t.empty(),t.html(this.value.visualize_html())},t.prototype.setValue=function(t){this.value=t.clone(),this.refresh()},t.prototype.visualize_html=function(t){return this.value.visualize_html(t)},t}();n.Variable=y;var b=function(){function t(t,n){this.numArgs=t,this.func=n}return t.prototype.operate=function(t,n){try{return O(this.func(n,t))}catch(n){return R(new o(t,n))}},t.prototype.isValidNumberOfArgs=function(n){return Array.isArray(this.numArgs)?this.numArgs[0]<=n&&(n<=this.numArgs[1]||this.numArgs[1]===t.ARGS_INF):n===this.numArgs},t.ARGS_INF=-1,t}();function w(t){if(0===t.length)return new c(1,1,[0],"double");if(1===t.length){var n=t[0];if(n.isScalar){var r=n.scalarValue();return new c(r,r,new Array(r*r),"double").fill(0)}if(1!==n.rows)throw"The one-argument version of this function requires a numeric row vector as an input.";return new c(n.atLinear(1),n.atLinear(2),new Array(n.atLinear(1)*n.atLinear(2)),"double").fill(0)}if(2===t.length){var e=t[0],i=t[1];if(!e.isScalar)throw"The argument for the number of rows must be a scalar.";if(!i.isScalar)throw"The argument for the number of columns must be a scalar.";return new c(e.scalarValue(),i.scalarValue(),new Array(e.scalarValue()*i.scalarValue()).fill(0),"double")}throw"Sorry, MatCrab does not support matrices with more than two dimensions."}function x(t,n,r){var e=1;if(n){if(!n.isScalar||n.scalarValue()<1||!Number.isInteger(n.scalarValue()))throw"The second argument specifying the operation dimension must be a positive integer scalar.";e=n.scalarValue()}return t.isVector?new c(1,1,[t.data.reduce(r)],"double"):1===e?t.accumulateCols(r):2===e?t.accumulateRows(r):t.clone()}function A(t,n){return(t=t.clone()).operateAll(n),t}function C(t){for(var n=t[0],r=n.clone(),e=1;e<=n.cols;++e)for(var i=1,u=r.rows;i<=n.rows;++i,--u)r.setAt(u,e,n.at(i,e));return r}function S(t){for(var n=t[0],r=n.clone(),e=1;e<=n.rows;++e)for(var i=1,u=r.cols;i<=n.cols;++i,--u)r.setAt(e,u,n.at(e,i));return r}n.MatlabFunction=b;var I,k={fliplr:new b(1,S),flipud:new b(1,C),flip:new b([1,2],function(t){if(1===t.length)return C(t);var n=t[1];if(!n.isScalar||n.scalarValue()<1||!Number.isInteger(n.scalarValue()))throw"The second argument specifying the flip dimension must be a positive integer scalar.";var r=n.scalarValue();return 1===r?C(t):2===r?S(t):t[0].clone()}),rot90:new b(1,function(t){for(var n=t[0],r=c.createSized(n.cols,n.rows,"double"),e=n.cols,i=1;e>=1;--e,++i)r.setRowData(i,n.colData(e));return r}),zeros:new b([0,b.ARGS_INF],function(t){return w(t).fill(0)}),ones:new b([0,b.ARGS_INF],function(t){return w(t).fill(1)}),eye:new b([0,b.ARGS_INF],function(t){for(var n=w(t).fill(0),r=Math.min(n.rows,n.cols),e=1;e<=r;++e)n.setAt(e,e,1);return n}),randi:new b([0,b.ARGS_INF],function(t){var n,r=t[0],e=1;if(!r.data.every(function(t){return Number.isInteger(t)}))throw"The first argument to randi must specify integral value(s).";if(1===r.numel)n=r.scalarValue();else{if(2!==r.numel)throw"The first argument to randi may only be either a scalar or a two-element vector.";if(e=r.atLinear(1),n=r.atLinear(2),e>n)throw"The specified lower bound for randi must be <= the specified upper bound."}t.shift();var i=w(t);return i.operateAll(function(){return u.MatlabMath.randomIntegerInclusive(e,n)}),i}),linspace:new b([2,3],function(t){var n=3===t.length?t[2].scalarValue():100,r=t[0].scalarValue(),e=t[1].scalarValue(),i=(e-r)/(n-1),u=a.range(r,e+i,i);return new c(1,n,u,"double")}),magic:new b(1,function(t){var n=w(t),r=n.rows;if(r%2!=0)for(var e=1,i=0,u=Math.floor(r/2),a=0;a<r;++a){for(var o=0;o<r;++o)n.setAt(i+1,u+1,e++),i=(i-1+r)%r,u=(u+1+r)%r;i=(i+2+r)%r,u=(u-1+r)%r}else if(2===r)n.setAll([1,4,3,2]);else if(4===r)n.setAll([16,5,9,4,2,11,7,14,3,10,6,15,13,8,12,1]);else if(6===r)n.setAll([35,3,31,8,30,4,1,32,9,28,5,36,6,7,2,33,34,29,26,21,22,17,12,13,19,23,27,10,14,18,24,25,20,15,16,11]);else if(8===r)n.setAll([64,9,17,40,32,41,49,8,2,55,47,26,34,23,15,58,3,54,46,27,35,22,14,59,61,12,20,37,29,44,52,5,60,13,21,36,28,45,53,4,6,51,43,30,38,19,11,62,7,50,42,31,39,18,10,63,57,16,24,33,25,48,56,1]);else{if(10!==r)throw"Sorry, MatCrab does not support magic matrices of even size greater than size 10.";n.setAll([92,98,4,85,86,17,23,79,10,11,99,80,81,87,93,24,5,6,12,18,1,7,88,19,25,76,82,13,94,100,8,14,20,21,2,83,89,95,96,77,15,16,22,3,9,90,91,97,78,84,67,73,54,60,61,42,48,29,35,36,74,55,56,62,68,49,30,31,37,43,51,57,63,69,75,26,32,38,44,50,58,64,70,71,52,33,39,45,46,27,40,41,47,28,34,65,66,72,53,59])}return n}),numel:new b(1,function(t){return c.scalar(t[0].numel,"double")}),length:new b(1,function(t){return c.scalar(Math.max(t[0].rows,t[0].cols),"double")}),size:new b(1,function(t){return new c(1,2,[t[0].rows,t[0].cols],"double")}),sum:new b([1,2],function(t){return x(t[0],t[1],function(t,n){return t+n})}),prod:new b([1,2],function(t){return x(t[0],t[1],function(t,n){return t*n})}),min:new b([1,2],function(t){return x(t[0],t[1],function(t,n){return Math.min(t,n)})}),max:new b([1,2],function(t){return x(t[0],t[1],function(t,n){return Math.max(t,n)})}),sqrt:new b(1,function(t){return A(t[0],function(t){return Math.sqrt(t)})}),sin:new b(1,function(t){return A(t[0],function(t){return Math.sin(t)})}),cos:new b(1,function(t){return A(t[0],function(t){return Math.cos(t)})}),tan:new b(1,function(t){return A(t[0],function(t){return Math.tan(t)})}),asin:new b(1,function(t){return A(t[0],function(t){return Math.asin(t)})}),acos:new b(1,function(t){return A(t[0],function(t){return Math.acos(t)})}),atan:new b(1,function(t){return A(t[0],function(t){return Math.atan(t)})}),sinh:new b(1,function(t){return A(t[0],function(t){return Math.sinh(t)})}),cosh:new b(1,function(t){return A(t[0],function(t){return Math.cosh(t)})}),tanh:new b(1,function(t){return A(t[0],function(t){return Math.tanh(t)})}),asinh:new b(1,function(t){return A(t[0],function(t){return Math.asinh(t)})}),acosh:new b(1,function(t){return A(t[0],function(t){return Math.acosh(t)})}),atanh:new b(1,function(t){return A(t[0],function(t){return Math.atanh(t)})}),display:new b([1,b.ARGS_INF],(I="display",function(t){throw"Sorry, MatCrab does not support the "+I+" function."})),imshow:new b(1,function(t,n){return n.env.imshow(t[0]),new c(1,1,[1],"double")})},E=function(){function t(t,n){for(var r in this.vars={},this.functions={},this.endValueStack=[],this.listeners=[],this.elem=t,n&&(this.imshowFigure=new T(n),this.imshowFigure.imshow(new c(4,4,[25,234,72,100,25,234,72,100,25,234,72,100,25,234,72,100],"double"))),k)this.setFunction(r,k[r])}return t.setGlobalEnvironment=function(n){var r=new t(n);u.asMutable(t).global=r},t.prototype.hasVar=function(t){return this.vars.hasOwnProperty(t)},t.prototype.lookup=function(t){var n=this.vars[t];return n||this.functions[t]},t.prototype.varLookup=function(t){return this.vars[t]},t.prototype.functionLookup=function(t){return this.functions[t]},t.prototype.setVar=function(t,n){var r=this.vars[t];r?r.setValue(n):(r=new y(t,n),this.elem&&("ans"!==t?this.elem.append(r.elem):this.elem.prepend(r.elem)),this.vars[t]=r),this.listeners.forEach(function(t){return t.onVariableSet(r)})},t.prototype.varUpdated=function(t){var n=this.vars[t];u.assert(n),this.listeners.forEach(function(t){return t.onVariableSet(n)})},t.prototype.setFunction=function(t,n){this.functions[t]=n},t.prototype.pushEndValue=function(t){this.endValueStack.push(t)},t.prototype.popEndValue=function(){this.endValueStack.pop()},t.prototype.getEndValue=function(){return this.endValueStack[this.endValueStack.length-1]},t.prototype.imshow=function(t){var n;null===(n=this.imshowFigure)||void 0===n||n.imshow(t)},t.prototype.addListener=function(t){this.listeners.push(t)},t.prototype.clear=function(){var t;this.vars={},null===(t=this.elem)||void 0===t||t.empty()},t}();n.Environment=E;var T=function(){function t(t){this.elem=t,this.context=t[0].getContext("2d")}return t.prototype.imshow=function(t){if(this.context){this.elem[0].width=t.width,this.elem[0].height=t.height;for(var n=this.context.createImageData(t.width,t.height),r=0;r<t.rows;++r)for(var e=0;e<t.cols;++e){var i=r*t.width+e,u=t.at(r+1,e+1);n.data[4*i]=u,n.data[4*i+1]=u,n.data[4*i+2]=u,n.data[4*i+3]=255}this.context.putImageData(n,0,0)}},t}();n.ImshowFigure=T;var M=function(){function t(t,n){this.ast=t,this.env=n}return t.createRedX=function(){return $('<svg class="matlab-error-svg"><line x1="-20" y1="80%" x2="100%" y2="20%" style="stroke:rgba(255,0,0, 0.3);stroke-width:5" transform="translate(10,0)"></line><line style="stroke:rgba(255,0,0, 0.3);stroke-width:5" y2="80%" x2="100%" y1="20%" x1="-20" transform="translate(10,0)"></line></svg>')},t.create=function(t,n){return"statement_group"===t.what?new F(t,n):"assignment"===t.what?new V(t,n):"indexed_assignment"===t.what?new N(t,n):L.create(t,n)},t}();n.CodeConstruct=M;var z={kind:"unexecuted"};function j(t){return t.every(function(t){return"success"===t.kind})}function O(t){return{kind:"success",value:t}}function R(t){return{kind:"error",error:t}}n.allSuccess=j;var L=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.result=z,n}return i(n,t),n.create=function(t,n){return this.grammarToSubclass[t.what](t,n)},n.prototype.setResult=function(t){this.result=t},n.prototype.execute=function(){var t=this.evaluate();return this.setResult(t),t},n.prototype.visualize_html=function(t){var n=$("<div></div>"),r=$('<div class="matlab-exp">'+this.visualize_expr(t)+"</div>").appendTo(n);if("error"===this.result.kind&&this.result.error.construct===this){r.append(M.createRedX());var e=$('\n            <div class="matlab-exp-bottom">\n                <div class="matlab-exp-error">\n                    '+this.result.error.message+"\n                </div>\n            </div>");n.append(e)}return n[0].outerHTML},n.grammarToSubclass={matrix_exp:function(t,n){return new D(t,n)},row_exp:function(t,n){return new W(t,n)},range_exp:function(t,n){return new U(t,n)},or_exp:function(t,n){return new q(t,n)},and_exp:function(t,n){return new G(t,n)},eq_exp:function(t,n){return new Z(t,n)},rel_exp:function(t,n){return new K(t,n)},add_exp:function(t,n){return new P(t,n)},mult_exp:function(t,n){return new H(t,n)},unary_exp:function(t,n){return new J(t,n)},transpose_exp:function(t,n){return new Y(t,n)},call_exp:function(t,n){return new Q(t,n)},colon_exp:function(t,n){return new X(t,n)},end_exp:function(t,n){return new et(t,n)},integer:function(t,n){return new nt(t,n)},float:function(t,n){return new nt(t,n)},identifier:function(t,n){return new rt(t,n)}},n}(M);n.Expression=L;var V=function(t){function n(n,r){var e=t.call(this,n,r)||this;return e.lhs=L.create(n.identifier,r),e.rhs=L.create(n.exp,r),e}return i(n,t),n.prototype.execute=function(){var t=this.rhs.execute();if("success"!==t.kind)return t;var n=this.env,r=this.lhs.name;return n.setVar(r,t.value),this.updatedValue=t.value,t},n.prototype.visualize_html=function(){var t=$("<div></div>"),n='<div class="matlab-assignment">\n            '+this.lhs.name+"\n            &nbsp;=&nbsp;\n            "+this.rhs.visualize_html()+"\n        </div>";if(t.append(n),this.updatedValue){var r='<div class="matlab-assignment-result">\n                '+this.lhs.name+" is now "+this.updatedValue.visualize_html()+"\n            </div>";t.append(r)}return t[0].outerHTML},n}(M);n.Assignment=V;var N=function(t){function n(n,r){var e=t.call(this,n,r)||this;return e.targetName=n.lhs.target,e.indicies=n.lhs.args.map(function(t){return L.create(t,r)}),e.rhs=L.create(n.rhs,r),e}return i(n,t),n.prototype.evaluate=function(){var t=this,n=this.env.lookup(this.targetName);if(!n||n instanceof b)return R(new o(this,"Sorry, I can't find a variable named "+this.targetName));var r=n.value;if(this.originalMatrix=r.clone(),this.indicies.length>2)return R(new o(this,"Sorry, indexing in more that two dimensions is not currently supported."));var e=this.rhs.execute();if("success"!==e.kind)return e;var i=this.indicies.map(function(n,e){1===t.indicies.length?t.env.pushEndValue(r.numel):t.env.pushEndValue(r.length(e+1));var i=n.execute();return t.env.popEndValue(),i});if(!j(i))return i.find(function(t){return"success"!==t.kind});1===i.length?this.subarrayResult=v.create(this.indicies[0]instanceof X?":":i[0].value):this.subarrayResult=l.create(this.indicies[0]instanceof X?":":i[0].value,this.indicies[1]instanceof X?":":i[1].value);try{return this.subarrayResult.verify(n.value),this.subarrayResult.assign(n.value,e.value),n.refresh(),this.env.varUpdated(n.name),this.updatedMatrix=n.value.clone(),O(this.updatedMatrix)}catch(t){return R(new o(this,t))}},n.prototype.visualize_expr=function(t){return"<div>\n            "+('<div class="matlab-assignment">\n            <div>\n                <div class="matlab-exp-index">\n                    '+(this.originalMatrix&&this.subarrayResult?this.subarrayResult.visualize_selection(this.originalMatrix):"")+'\n                    <div class="matlab-identifier-name">\n                        '+(this.subarrayResult?this.targetName+this.subarrayResult.indexingText():this.targetName)+"\n                    </div>\n                </div>\n                \n            </div>\n            &nbsp;=&nbsp;\n            "+this.rhs.visualize_html()+"\n        </div>")+"\n            "+(this.updatedMatrix?'\n            <div class="matlab-assignment-result">\n                '+this.targetName+" is now "+this.updatedMatrix.visualize_html()+"\n            </div>":"")+"\n        </div>"},n}(L),F=function(t){function n(n,r){var e=t.call(this,n,r)||this;return e.statements=n.statements.map(function(t){return M.create(t,r)}),u.assert(e.statements.length>0),e}return i(n,t),n.prototype.execute=function(){for(var t,n=0;n<this.statements.length;++n){var r=this.statements[n];if(this.lastStatementExecuted=r,"success"!==(t=r.execute()).kind)return t}return t},n.prototype.visualize_html=function(){return this.lastStatementExecuted.visualize_html()},n}(M);n.StatementGroup=F;var D=function(t){function n(n,r){var e=t.call(this,n,r)||this;return e.rows=n.rows.map(function(t){return L.create(t,r)}),e}return i(n,t),n.prototype.evaluate=function(){var t=this.rows.map(function(t){return t.execute()});return j(t)?this.append_rows(t.map(function(t){return t.value})):t.find(function(t){return"success"!==t.kind})},n.prototype.append_rows=function(t){for(var n=[],r=t[0].cols,e=0,i=0;i<r;++i)n.push([]);for(i=0;i<t.length;++i){var u=t[i];if(e+=u.rows,u.cols!==r)return R(new o(this,"Mismatched matrix number of columns."));for(var a=0;a<r;++a)for(var s=0;s<u.rows;++s)n[a].push(u.at(s+1,a+1))}var l=[].concat.apply([],n);return O(new c(e,r,l,t.some(function(t){return"double"===t.dataType})?"double":t[0].dataType))},n.prototype.visualize_expr=function(){var t=$("<table></table>");t.addClass("matlab-table");var n=u.Color.WHITE;"success"===this.result.kind&&(n=this.result.value.color),t.css("background-color",n);for(var r=this.rows,e=0;e<r.length;++e){var i=$("<tr></tr>");t.append(i);var a=$("<td class='matlab-matrix-cell'></td>");i.append(a),a.html(r[e].visualize_html({contained:!0}))}return t[0].outerHTML},n}(L),W=function(t){function n(n,r){var e=t.call(this,n,r)||this;return e.cols=n.cols.map(function(t){return L.create(t,r)}),e}return i(n,t),n.prototype.evaluate=function(){var t=this.cols.map(function(t){return t.execute()});return j(t)?this.append_cols(t.map(function(t){return t.value})):t.find(function(t){return"success"!==t.kind})},n.prototype.append_cols=function(t){var n=t[0].rows;return t.some(function(t){return t.rows!=n})?R(new o(this,"Mismatched matrix number of rows.")):O(new c(t[0].rows,t.reduce(function(t,n){return t+n.cols},0),t.reduce(function(t,n){return t=t.concat(n.data)},[]),t.some(function(t){return"double"===t.dataType})?"double":t[0].dataType))},n.prototype.visualize_expr=function(){var t=this.cols;if(1==t.length)return t[0].visualize_html();var n=$("<table></table>");n.addClass("matlab-table");var r=u.Color.WHITE;"success"===this.result.kind&&(r=this.result.value.color),n.css("background-color",r);var e=$("<tr></tr>");n.append(e);for(var i=0;i<t.length;++i){var a=$("<td class='matlab-matrix-cell'></td>");e.append(a);t[i];a.html(t[i].visualize_html({contained:!0}))}return n[0].outerHTML},n}(L),U=function(t){function n(n,r){var e=t.call(this,n,r)||this;return e.start=L.create(n.start,r),e.end=L.create(n.end,r),e.step=n.step?L.create(n.step,r):null,e}return i(n,t),n.prototype.evaluate=function(){var t=this.start.execute(),n=this.end.execute(),r=this.step&&this.step.execute();if("success"!==t.kind)return t;if("success"!==n.kind)return n;if(r&&"success"!==r.kind)return r;var e=t.value.scalarValue(),i=n.value.scalarValue(),u=r?r.value.scalarValue():1,a=[];if(u>0){if(e<=i)for(;e<=i;)a.push(e),e+=u}else if(i<=e)for(;i<=e;)a.push(e),e+=u;return O(new c(1,a.length,a,"double"))},n.prototype.visualize_expr=function(){var t=void 0;if("success"===this.result.kind){for(var n=this.result.value,r="",e=1;e<=n.numel;++e)r+="<td class='matlab-matrix-cell'>\n                    "+tt(n.atLinear(e))+"\n                </td>";t='\n            <div class="matlab-range-result">\n                <table class="matlab-table" style="background-color: '+u.Color.toColor(n,u.Color.LIGHT_LETTERS)+'">\n                    <svg class="matlab-range-svg">\n                        <defs>\n                            <marker id="arrow" markerWidth="10" markerHeight="10" refx="9" refy="3" orient="auto" markerUnits="strokeWidth">\n                                <path d="M0,0 L0,6 L9,3 z" fill="#000" />\n                            </marker>\n                        </defs>\n                        <g transform="translate(-10,0)">\n                            <line x1="22" y1="25" x2="100%" y2="25" stroke="#000" stroke-width="1" marker-end="url(#arrow)" />\n                        </g>\n                    </svg>\n                    <tr>'+r+"</tr>\n                </table>\n            </div>"}return'<div class="matlab-range">\n            <div class="matlab-range-header">\n                <table class="matlab-table">\n                    <tr>\n                        <th>start</th>\n                        '+(this.step?"<th>step</th>":"")+"\n                        <th>end</th>\n                    </tr>\n                    <tr>\n                        <td class='matlab-matrix-cell'>"+this.start.visualize_html()+"</td>\n                        "+(this.step?"<td class='matlab-matrix-cell'>"+this.step.visualize_html()+"</td>":"")+"\n                        <td class='matlab-matrix-cell'>"+this.end.visualize_html()+"</td>\n                    </tr>\n                </table>\n            </div>\n            "+t+"\n        </div>"},n}(L),B=function(t){function n(n,r){var e=t.call(this,n,r)||this;return e.op=n.op,e.left=L.create(n.left,r),e.right=L.create(n.right,r),e}return i(n,t),n.prototype.evaluate=function(){var t=this.left.execute(),n=this.right.execute();if("success"!==t.kind)return t;if("success"!==n.kind)return n;var r=this.checkOperands(t,n);return r||this.binaryOp(t.value,n.value,this.op,this.operators[this.op],this.dataType)},n.prototype.checkOperands=function(t,n){return null},n.prototype.binaryOp=function(t,n,r,e,i){var u,a,s=[];if(t.rows===n.rows&&t.cols===n.cols){for(var l=1;l<=t.numel;++l)s.push(e(t.atLinear(l),n.atLinear(l)));u=t.rows,a=t.cols}else if(t.isScalar){var f=t.scalarValue();for(l=1;l<=n.numel;++l)s.push(e(f,n.atLinear(l)));u=n.rows,a=n.cols}else{if(!n.isScalar)return R(new o(this,"Mismatched dimensions for operator "+r+". LHS is a "+t.rows+"x"+t.cols+" and RHS is a "+n.rows+"x"+n.cols+"."));var h=n.scalarValue();for(l=1;l<=t.numel;++l)s.push(e(t.atLinear(l),h));u=t.rows,a=t.cols}return O(new c(u,a,s,i))},n.prototype.visualize_expr=function(){return'<div class="matlab-exp-binaryOp">\n            <div>'+this.left.visualize_html()+"</div>\n            <div>&nbsp;"+this.op+"&nbsp;</div>\n            <div>"+this.right.visualize_html()+"</div>\n        </div>"},n}(L),P=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.dataType="double",n.operators={"+":function(t,n){return t+n},"-":function(t,n){return t-n}},n}return i(n,t),n}(B),H=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.dataType="double",n.operators={"*":function(t,n){return t*n},"/":function(t,n){return t/n},".*":function(t,n){return t*n},"./":function(t,n){return t/n},".^":function(t,n){return Math.pow(t,n)}},n}return i(n,t),n.prototype.checkOperands=function(t,n){return"*"!==this.op&&"/"!==this.op&&"^"!==this.op||t.value.isScalar||n.value.isScalar?null:R(new o(this,"Sorry, matrix multiplication, division, and exponentiation are not supported. You may use the element-wise versions (i.e. .*, ./, .^)."))},n}(B),q=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.dataType="logical",n.operators={"|":function(t,n){return t||n?1:0}},n}return i(n,t),n}(B),G=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.dataType="logical",n.operators={"&":function(t,n){return t&&n?1:0}},n}return i(n,t),n}(B),Z=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.dataType="logical",n.operators={"==":function(t,n){return t===n?1:0},"~=":function(t,n){return t!==n?1:0}},n}return i(n,t),n}(B),K=function(t){function n(){var n=null!==t&&t.apply(this,arguments)||this;return n.dataType="logical",n.operators={"<":function(t,n){return t<n?1:0},"<=":function(t,n){return t<=n?1:0},">":function(t,n){return t>n?1:0},">=":function(t,n){return t>=n?1:0}},n}return i(n,t),n}(B),J=function(t){function n(n,r){var e=t.call(this,n,r)||this;return e.operators={"+":function(t){return t},"-":function(t){return-t},"~":function(t){return t?0:1}},e.operatorDataTypes={"+":"double","-":"double","~":"logical"},e.op=n.op,e.operand=L.create(n.sub,r),e}return i(n,t),n.prototype.evaluate=function(){var t=this.operand.execute();if("success"!==t.kind)return t;var n=this.checkOperand(t);return n||this.unaryOp(t.value,this.operators[this.op],this.operatorDataTypes[this.op])},n.prototype.checkOperand=function(t){return null},n.prototype.unaryOp=function(t,n,r){return O(new c(t.rows,t.cols,t.data.map(n),r))},n.prototype.visualize_expr=function(){return'<div class="matlab-exp-unaryOp">\n            <div>'+this.op+"&nbsp;</div>\n            <div>"+this.operand.visualize_html()+"</div>\n        </div>"},n}(L);n.UnaryOperatorExpression=J;var Y=function(t){function n(n,r){var e=t.call(this,n,r)||this;return e.numTransposes=n.transposes.length,e.operand=L.create(n.sub,r),e}return i(n,t),n.prototype.evaluate=function(){var t=this.operand.execute();if("success"!==t.kind)return t;for(var n=t.value,r=[],e=1;e<=n.rows;++e)for(var i=1;i<=n.cols;++i)r.push(n.at(e,i));return O(new c(n.cols,n.rows,r,n.dataType))},n.prototype.visualize_expr=function(){return'<div class="matlab-exp-unaryOp">\n            <div>transpose&nbsp;</div>\n            <div>'+this.operand.visualize_html()+"</div>\n        </div>"},n}(L);n.TransposeExpression=Y;var Q=function(t){function n(n,r){var e=t.call(this,n,r)||this;return e.targetName=n.target,e.indiciesOrArgs=n.args.map(function(t){return L.create(t,r)}),e}return i(n,t),n.prototype.evaluate=function(){var t=this,n=this.env.lookup(this.targetName);if(!n)return R(new o(this,"Sorry, I can't find a variable or function named "+this.targetName));if(!(n instanceof y)){var r=this.executedFunction=n;if(!r.isValidNumberOfArgs(this.indiciesOrArgs.length))return R(new o(this,"Invalid number of arguments for the "+this.targetName+" function."));var e=this.indiciesOrArgs.map(function(t){return t.execute()});return j(e)?r.operate(this,e.map(function(t){return t.value})):e.find(function(t){return"success"!==t.kind})}var i=n.value;if(this.originalMatrix=i.clone(),this.indiciesOrArgs.length>2)return R(new o(this,"Sorry, indexing in more that two dimensions is not currently supported."));var u=this.indiciesOrArgs.map(function(n,r){1===t.indiciesOrArgs.length?t.env.pushEndValue(i.numel):t.env.pushEndValue(i.length(r+1));var e=n.execute();return t.env.popEndValue(),e});if(!j(u))return u.find(function(t){return"success"!==t.kind});1===u.length?this.subarrayResult=v.create(this.indiciesOrArgs[0]instanceof X?":":u[0].value):this.subarrayResult=l.create(this.indiciesOrArgs[0]instanceof X?":":u[0].value,this.indiciesOrArgs[1]instanceof X?":":u[1].value);try{return this.subarrayResult.verify(i),O(this.subarrayResult.readValue(i))}catch(t){return R(new o(this,t))}},n.prototype.visualize_expr=function(t){return $("<div></div>").addClass("matlab-exp-index"),this.originalMatrix&&this.subarrayResult?'<div class="matlab-exp-index">\n                '+this.subarrayResult.visualize_selection(this.originalMatrix)+'\n                <div class="matlab-identifier-name">\n                '+(this.subarrayResult?this.targetName+this.subarrayResult.indexingText():this.targetName)+"\n                </div>\n            </div>":this.executedFunction?'<div class="matlab-exp-call">\n                '+this.targetName+"(\n                    "+this.indiciesOrArgs.map(function(t){return'<div class="matlab-call-arg">'+t.visualize_html()+"</div>"}).join(",")+"\n                )</div>":""},n}(L),X=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return i(n,t),n.prototype.evaluate=function(){return O(new c(1,1,[1],"double"))},n.prototype.visualize_expr=function(){return"<span>:</span>"},n}(L);function tt(t){var n=c.formatNumber(t);return'<div class="matlab-scalar'+(n.length>3?" double":"")+'">\n        <span>'+n+"</span>\n    </div>"}var nt=function(t){function n(n,r){var e=t.call(this,n,r)||this;return e.literalValue=c.scalar(e.ast.value,"double"),e}return i(n,t),n.prototype.evaluate=function(){return O(this.literalValue)},n.prototype.visualize_expr=function(t){return t&&t.contained?tt(this.literalValue.scalarValue()):this.literalValue.visualize_html()},n}(L);n.LiteralExpression=nt;var rt=function(t){function n(n,r){var e=t.call(this,n,r)||this;return e.name=n.identifier,e}return i(n,t),n.prototype.evaluate=function(){var t=this.env.lookup(this.name);return!t||t instanceof b?R(new o(this,"Cannot find variable "+this.name)):O(t.value)},n.prototype.visualize_expr=function(){return'<div class="matlab-identifier">\n            '+("success"===this.result.kind?this.result.value.visualize_html():"")+'\n            <div class="matlab-identifier-name">'+this.name+"</div>\n        </div>"},n}(L);n.IdentifierExpression=rt;var et=function(t){function n(n,r){return t.call(this,n,r)||this}return i(n,t),n.prototype.evaluate=function(){var t=this.env.getEndValue();return t?O(c.scalar(t,"double")):R(new o(this,"The end keyword is only allowed within the context of an indexing expression."))},n.prototype.visualize_expr=function(){return'<div class="matlab-identifier">\n            '+("success"===this.result.kind?this.result.value.visualize_html():"")+'\n            <div class="matlab-identifier-name">end</div>\n        </div>'},n}(L);n.EndExpression=et},function(t,n,r){(function(t,e){var i;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var u,a=200,o="Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",c="Expected a function",s="__lodash_hash_undefined__",l=500,f="__lodash_placeholder__",h=1,p=2,d=4,v=1,g=2,m=1,_=2,y=4,b=8,w=16,x=32,A=64,C=128,S=256,I=512,k=30,E="...",T=800,M=16,z=1,j=2,O=1/0,$=9007199254740991,R=1.7976931348623157e308,L=NaN,V=4294967295,N=V-1,F=V>>>1,D=[["ary",C],["bind",m],["bindKey",_],["curry",b],["curryRight",w],["flip",I],["partial",x],["partialRight",A],["rearg",S]],W="[object Arguments]",U="[object Array]",B="[object AsyncFunction]",P="[object Boolean]",H="[object Date]",q="[object DOMException]",G="[object Error]",Z="[object Function]",K="[object GeneratorFunction]",J="[object Map]",Y="[object Number]",Q="[object Null]",X="[object Object]",tt="[object Proxy]",nt="[object RegExp]",rt="[object Set]",et="[object String]",it="[object Symbol]",ut="[object Undefined]",at="[object WeakMap]",ot="[object WeakSet]",ct="[object ArrayBuffer]",st="[object DataView]",lt="[object Float32Array]",ft="[object Float64Array]",ht="[object Int8Array]",pt="[object Int16Array]",dt="[object Int32Array]",vt="[object Uint8Array]",gt="[object Uint8ClampedArray]",mt="[object Uint16Array]",_t="[object Uint32Array]",yt=/\b__p \+= '';/g,bt=/\b(__p \+=) '' \+/g,wt=/(__e\(.*?\)|\b__t\)) \+\n'';/g,xt=/&(?:amp|lt|gt|quot|#39);/g,At=/[&<>"']/g,Ct=RegExp(xt.source),St=RegExp(At.source),It=/<%-([\s\S]+?)%>/g,kt=/<%([\s\S]+?)%>/g,Et=/<%=([\s\S]+?)%>/g,Tt=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,Mt=/^\w*$/,zt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,jt=/[\\^$.*+?()[\]{}|]/g,Ot=RegExp(jt.source),$t=/^\s+|\s+$/g,Rt=/^\s+/,Lt=/\s+$/,Vt=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,Nt=/\{\n\/\* \[wrapped with (.+)\] \*/,Ft=/,? & /,Dt=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,Wt=/\\(\\)?/g,Ut=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,Bt=/\w*$/,Pt=/^[-+]0x[0-9a-f]+$/i,Ht=/^0b[01]+$/i,qt=/^\[object .+?Constructor\]$/,Gt=/^0o[0-7]+$/i,Zt=/^(?:0|[1-9]\d*)$/,Kt=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,Jt=/($^)/,Yt=/['\n\r\u2028\u2029\\]/g,Qt="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",Xt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",tn="[\\ud800-\\udfff]",nn="["+Xt+"]",rn="["+Qt+"]",en="\\d+",un="[\\u2700-\\u27bf]",an="[a-z\\xdf-\\xf6\\xf8-\\xff]",on="[^\\ud800-\\udfff"+Xt+en+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",cn="\\ud83c[\\udffb-\\udfff]",sn="[^\\ud800-\\udfff]",ln="(?:\\ud83c[\\udde6-\\uddff]){2}",fn="[\\ud800-\\udbff][\\udc00-\\udfff]",hn="[A-Z\\xc0-\\xd6\\xd8-\\xde]",pn="(?:"+an+"|"+on+")",dn="(?:"+hn+"|"+on+")",vn="(?:"+rn+"|"+cn+")"+"?",gn="[\\ufe0e\\ufe0f]?"+vn+("(?:\\u200d(?:"+[sn,ln,fn].join("|")+")[\\ufe0e\\ufe0f]?"+vn+")*"),mn="(?:"+[un,ln,fn].join("|")+")"+gn,_n="(?:"+[sn+rn+"?",rn,ln,fn,tn].join("|")+")",yn=RegExp("['’]","g"),bn=RegExp(rn,"g"),wn=RegExp(cn+"(?="+cn+")|"+_n+gn,"g"),xn=RegExp([hn+"?"+an+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[nn,hn,"$"].join("|")+")",dn+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[nn,hn+pn,"$"].join("|")+")",hn+"?"+pn+"+(?:['’](?:d|ll|m|re|s|t|ve))?",hn+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",en,mn].join("|"),"g"),An=RegExp("[\\u200d\\ud800-\\udfff"+Qt+"\\ufe0e\\ufe0f]"),Cn=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Sn=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],In=-1,kn={};kn[lt]=kn[ft]=kn[ht]=kn[pt]=kn[dt]=kn[vt]=kn[gt]=kn[mt]=kn[_t]=!0,kn[W]=kn[U]=kn[ct]=kn[P]=kn[st]=kn[H]=kn[G]=kn[Z]=kn[J]=kn[Y]=kn[X]=kn[nt]=kn[rt]=kn[et]=kn[at]=!1;var En={};En[W]=En[U]=En[ct]=En[st]=En[P]=En[H]=En[lt]=En[ft]=En[ht]=En[pt]=En[dt]=En[J]=En[Y]=En[X]=En[nt]=En[rt]=En[et]=En[it]=En[vt]=En[gt]=En[mt]=En[_t]=!0,En[G]=En[Z]=En[at]=!1;var Tn={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Mn=parseFloat,zn=parseInt,jn="object"==typeof t&&t&&t.Object===Object&&t,On="object"==typeof self&&self&&self.Object===Object&&self,$n=jn||On||Function("return this")(),Rn=n&&!n.nodeType&&n,Ln=Rn&&"object"==typeof e&&e&&!e.nodeType&&e,Vn=Ln&&Ln.exports===Rn,Nn=Vn&&jn.process,Fn=function(){try{var t=Ln&&Ln.require&&Ln.require("util").types;return t||Nn&&Nn.binding&&Nn.binding("util")}catch(t){}}(),Dn=Fn&&Fn.isArrayBuffer,Wn=Fn&&Fn.isDate,Un=Fn&&Fn.isMap,Bn=Fn&&Fn.isRegExp,Pn=Fn&&Fn.isSet,Hn=Fn&&Fn.isTypedArray;function qn(t,n,r){switch(r.length){case 0:return t.call(n);case 1:return t.call(n,r[0]);case 2:return t.call(n,r[0],r[1]);case 3:return t.call(n,r[0],r[1],r[2])}return t.apply(n,r)}function Gn(t,n,r,e){for(var i=-1,u=null==t?0:t.length;++i<u;){var a=t[i];n(e,a,r(a),t)}return e}function Zn(t,n){for(var r=-1,e=null==t?0:t.length;++r<e&&!1!==n(t[r],r,t););return t}function Kn(t,n){for(var r=null==t?0:t.length;r--&&!1!==n(t[r],r,t););return t}function Jn(t,n){for(var r=-1,e=null==t?0:t.length;++r<e;)if(!n(t[r],r,t))return!1;return!0}function Yn(t,n){for(var r=-1,e=null==t?0:t.length,i=0,u=[];++r<e;){var a=t[r];n(a,r,t)&&(u[i++]=a)}return u}function Qn(t,n){return!!(null==t?0:t.length)&&cr(t,n,0)>-1}function Xn(t,n,r){for(var e=-1,i=null==t?0:t.length;++e<i;)if(r(n,t[e]))return!0;return!1}function tr(t,n){for(var r=-1,e=null==t?0:t.length,i=Array(e);++r<e;)i[r]=n(t[r],r,t);return i}function nr(t,n){for(var r=-1,e=n.length,i=t.length;++r<e;)t[i+r]=n[r];return t}function rr(t,n,r,e){var i=-1,u=null==t?0:t.length;for(e&&u&&(r=t[++i]);++i<u;)r=n(r,t[i],i,t);return r}function er(t,n,r,e){var i=null==t?0:t.length;for(e&&i&&(r=t[--i]);i--;)r=n(r,t[i],i,t);return r}function ir(t,n){for(var r=-1,e=null==t?0:t.length;++r<e;)if(n(t[r],r,t))return!0;return!1}var ur=hr("length");function ar(t,n,r){var e;return r(t,function(t,r,i){if(n(t,r,i))return e=r,!1}),e}function or(t,n,r,e){for(var i=t.length,u=r+(e?1:-1);e?u--:++u<i;)if(n(t[u],u,t))return u;return-1}function cr(t,n,r){return n==n?function(t,n,r){var e=r-1,i=t.length;for(;++e<i;)if(t[e]===n)return e;return-1}(t,n,r):or(t,lr,r)}function sr(t,n,r,e){for(var i=r-1,u=t.length;++i<u;)if(e(t[i],n))return i;return-1}function lr(t){return t!=t}function fr(t,n){var r=null==t?0:t.length;return r?vr(t,n)/r:L}function hr(t){return function(n){return null==n?u:n[t]}}function pr(t){return function(n){return null==t?u:t[n]}}function dr(t,n,r,e,i){return i(t,function(t,i,u){r=e?(e=!1,t):n(r,t,i,u)}),r}function vr(t,n){for(var r,e=-1,i=t.length;++e<i;){var a=n(t[e]);a!==u&&(r=r===u?a:r+a)}return r}function gr(t,n){for(var r=-1,e=Array(t);++r<t;)e[r]=n(r);return e}function mr(t){return function(n){return t(n)}}function _r(t,n){return tr(n,function(n){return t[n]})}function yr(t,n){return t.has(n)}function br(t,n){for(var r=-1,e=t.length;++r<e&&cr(n,t[r],0)>-1;);return r}function wr(t,n){for(var r=t.length;r--&&cr(n,t[r],0)>-1;);return r}var xr=pr({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),Ar=pr({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Cr(t){return"\\"+Tn[t]}function Sr(t){return An.test(t)}function Ir(t){var n=-1,r=Array(t.size);return t.forEach(function(t,e){r[++n]=[e,t]}),r}function kr(t,n){return function(r){return t(n(r))}}function Er(t,n){for(var r=-1,e=t.length,i=0,u=[];++r<e;){var a=t[r];a!==n&&a!==f||(t[r]=f,u[i++]=r)}return u}function Tr(t){var n=-1,r=Array(t.size);return t.forEach(function(t){r[++n]=t}),r}function Mr(t){var n=-1,r=Array(t.size);return t.forEach(function(t){r[++n]=[t,t]}),r}function zr(t){return Sr(t)?function(t){var n=wn.lastIndex=0;for(;wn.test(t);)++n;return n}(t):ur(t)}function jr(t){return Sr(t)?function(t){return t.match(wn)||[]}(t):function(t){return t.split("")}(t)}var Or=pr({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var $r=function t(n){var r,e=(n=null==n?$n:$r.defaults($n.Object(),n,$r.pick($n,Sn))).Array,i=n.Date,Qt=n.Error,Xt=n.Function,tn=n.Math,nn=n.Object,rn=n.RegExp,en=n.String,un=n.TypeError,an=e.prototype,on=Xt.prototype,cn=nn.prototype,sn=n["__core-js_shared__"],ln=on.toString,fn=cn.hasOwnProperty,hn=0,pn=(r=/[^.]+$/.exec(sn&&sn.keys&&sn.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"",dn=cn.toString,vn=ln.call(nn),gn=$n._,mn=rn("^"+ln.call(fn).replace(jt,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),_n=Vn?n.Buffer:u,wn=n.Symbol,An=n.Uint8Array,Tn=_n?_n.allocUnsafe:u,jn=kr(nn.getPrototypeOf,nn),On=nn.create,Rn=cn.propertyIsEnumerable,Ln=an.splice,Nn=wn?wn.isConcatSpreadable:u,Fn=wn?wn.iterator:u,ur=wn?wn.toStringTag:u,pr=function(){try{var t=Nu(nn,"defineProperty");return t({},"",{}),t}catch(t){}}(),Rr=n.clearTimeout!==$n.clearTimeout&&n.clearTimeout,Lr=i&&i.now!==$n.Date.now&&i.now,Vr=n.setTimeout!==$n.setTimeout&&n.setTimeout,Nr=tn.ceil,Fr=tn.floor,Dr=nn.getOwnPropertySymbols,Wr=_n?_n.isBuffer:u,Ur=n.isFinite,Br=an.join,Pr=kr(nn.keys,nn),Hr=tn.max,qr=tn.min,Gr=i.now,Zr=n.parseInt,Kr=tn.random,Jr=an.reverse,Yr=Nu(n,"DataView"),Qr=Nu(n,"Map"),Xr=Nu(n,"Promise"),te=Nu(n,"Set"),ne=Nu(n,"WeakMap"),re=Nu(nn,"create"),ee=ne&&new ne,ie={},ue=la(Yr),ae=la(Qr),oe=la(Xr),ce=la(te),se=la(ne),le=wn?wn.prototype:u,fe=le?le.valueOf:u,he=le?le.toString:u;function pe(t){if(Eo(t)&&!mo(t)&&!(t instanceof me)){if(t instanceof ge)return t;if(fn.call(t,"__wrapped__"))return fa(t)}return new ge(t)}var de=function(){function t(){}return function(n){if(!ko(n))return{};if(On)return On(n);t.prototype=n;var r=new t;return t.prototype=u,r}}();function ve(){}function ge(t,n){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!n,this.__index__=0,this.__values__=u}function me(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=V,this.__views__=[]}function _e(t){var n=-1,r=null==t?0:t.length;for(this.clear();++n<r;){var e=t[n];this.set(e[0],e[1])}}function ye(t){var n=-1,r=null==t?0:t.length;for(this.clear();++n<r;){var e=t[n];this.set(e[0],e[1])}}function be(t){var n=-1,r=null==t?0:t.length;for(this.clear();++n<r;){var e=t[n];this.set(e[0],e[1])}}function we(t){var n=-1,r=null==t?0:t.length;for(this.__data__=new be;++n<r;)this.add(t[n])}function xe(t){var n=this.__data__=new ye(t);this.size=n.size}function Ae(t,n){var r=mo(t),e=!r&&go(t),i=!r&&!e&&wo(t),u=!r&&!e&&!i&&Lo(t),a=r||e||i||u,o=a?gr(t.length,en):[],c=o.length;for(var s in t)!n&&!fn.call(t,s)||a&&("length"==s||i&&("offset"==s||"parent"==s)||u&&("buffer"==s||"byteLength"==s||"byteOffset"==s)||Hu(s,c))||o.push(s);return o}function Ce(t){var n=t.length;return n?t[wi(0,n-1)]:u}function Se(t,n){return oa(ru(t),$e(n,0,t.length))}function Ie(t){return oa(ru(t))}function ke(t,n,r){(r===u||ho(t[n],r))&&(r!==u||n in t)||je(t,n,r)}function Ee(t,n,r){var e=t[n];fn.call(t,n)&&ho(e,r)&&(r!==u||n in t)||je(t,n,r)}function Te(t,n){for(var r=t.length;r--;)if(ho(t[r][0],n))return r;return-1}function Me(t,n,r,e){return Fe(t,function(t,i,u){n(e,t,r(t),u)}),e}function ze(t,n){return t&&eu(n,ic(n),t)}function je(t,n,r){"__proto__"==n&&pr?pr(t,n,{configurable:!0,enumerable:!0,value:r,writable:!0}):t[n]=r}function Oe(t,n){for(var r=-1,i=n.length,a=e(i),o=null==t;++r<i;)a[r]=o?u:Xo(t,n[r]);return a}function $e(t,n,r){return t==t&&(r!==u&&(t=t<=r?t:r),n!==u&&(t=t>=n?t:n)),t}function Re(t,n,r,e,i,a){var o,c=n&h,s=n&p,l=n&d;if(r&&(o=i?r(t,e,i,a):r(t)),o!==u)return o;if(!ko(t))return t;var f=mo(t);if(f){if(o=function(t){var n=t.length,r=new t.constructor(n);return n&&"string"==typeof t[0]&&fn.call(t,"index")&&(r.index=t.index,r.input=t.input),r}(t),!c)return ru(t,o)}else{var v=Wu(t),g=v==Z||v==K;if(wo(t))return Ji(t,c);if(v==X||v==W||g&&!i){if(o=s||g?{}:Bu(t),!c)return s?function(t,n){return eu(t,Du(t),n)}(t,function(t,n){return t&&eu(n,uc(n),t)}(o,t)):function(t,n){return eu(t,Fu(t),n)}(t,ze(o,t))}else{if(!En[v])return i?t:{};o=function(t,n,r){var e,i=t.constructor;switch(n){case ct:return Yi(t);case P:case H:return new i(+t);case st:return function(t,n){var r=n?Yi(t.buffer):t.buffer;return new t.constructor(r,t.byteOffset,t.byteLength)}(t,r);case lt:case ft:case ht:case pt:case dt:case vt:case gt:case mt:case _t:return Qi(t,r);case J:return new i;case Y:case et:return new i(t);case nt:return function(t){var n=new t.constructor(t.source,Bt.exec(t));return n.lastIndex=t.lastIndex,n}(t);case rt:return new i;case it:return e=t,fe?nn(fe.call(e)):{}}}(t,v,c)}}a||(a=new xe);var m=a.get(t);if(m)return m;if(a.set(t,o),Oo(t))return t.forEach(function(e){o.add(Re(e,n,r,e,t,a))}),o;if(To(t))return t.forEach(function(e,i){o.set(i,Re(e,n,r,i,t,a))}),o;var _=f?u:(l?s?zu:Mu:s?uc:ic)(t);return Zn(_||t,function(e,i){_&&(e=t[i=e]),Ee(o,i,Re(e,n,r,i,t,a))}),o}function Le(t,n,r){var e=r.length;if(null==t)return!e;for(t=nn(t);e--;){var i=r[e],a=n[i],o=t[i];if(o===u&&!(i in t)||!a(o))return!1}return!0}function Ve(t,n,r){if("function"!=typeof t)throw new un(c);return ea(function(){t.apply(u,r)},n)}function Ne(t,n,r,e){var i=-1,u=Qn,o=!0,c=t.length,s=[],l=n.length;if(!c)return s;r&&(n=tr(n,mr(r))),e?(u=Xn,o=!1):n.length>=a&&(u=yr,o=!1,n=new we(n));t:for(;++i<c;){var f=t[i],h=null==r?f:r(f);if(f=e||0!==f?f:0,o&&h==h){for(var p=l;p--;)if(n[p]===h)continue t;s.push(f)}else u(n,h,e)||s.push(f)}return s}pe.templateSettings={escape:It,evaluate:kt,interpolate:Et,variable:"",imports:{_:pe}},pe.prototype=ve.prototype,pe.prototype.constructor=pe,ge.prototype=de(ve.prototype),ge.prototype.constructor=ge,me.prototype=de(ve.prototype),me.prototype.constructor=me,_e.prototype.clear=function(){this.__data__=re?re(null):{},this.size=0},_e.prototype.delete=function(t){var n=this.has(t)&&delete this.__data__[t];return this.size-=n?1:0,n},_e.prototype.get=function(t){var n=this.__data__;if(re){var r=n[t];return r===s?u:r}return fn.call(n,t)?n[t]:u},_e.prototype.has=function(t){var n=this.__data__;return re?n[t]!==u:fn.call(n,t)},_e.prototype.set=function(t,n){var r=this.__data__;return this.size+=this.has(t)?0:1,r[t]=re&&n===u?s:n,this},ye.prototype.clear=function(){this.__data__=[],this.size=0},ye.prototype.delete=function(t){var n=this.__data__,r=Te(n,t);return!(r<0||(r==n.length-1?n.pop():Ln.call(n,r,1),--this.size,0))},ye.prototype.get=function(t){var n=this.__data__,r=Te(n,t);return r<0?u:n[r][1]},ye.prototype.has=function(t){return Te(this.__data__,t)>-1},ye.prototype.set=function(t,n){var r=this.__data__,e=Te(r,t);return e<0?(++this.size,r.push([t,n])):r[e][1]=n,this},be.prototype.clear=function(){this.size=0,this.__data__={hash:new _e,map:new(Qr||ye),string:new _e}},be.prototype.delete=function(t){var n=Lu(this,t).delete(t);return this.size-=n?1:0,n},be.prototype.get=function(t){return Lu(this,t).get(t)},be.prototype.has=function(t){return Lu(this,t).has(t)},be.prototype.set=function(t,n){var r=Lu(this,t),e=r.size;return r.set(t,n),this.size+=r.size==e?0:1,this},we.prototype.add=we.prototype.push=function(t){return this.__data__.set(t,s),this},we.prototype.has=function(t){return this.__data__.has(t)},xe.prototype.clear=function(){this.__data__=new ye,this.size=0},xe.prototype.delete=function(t){var n=this.__data__,r=n.delete(t);return this.size=n.size,r},xe.prototype.get=function(t){return this.__data__.get(t)},xe.prototype.has=function(t){return this.__data__.has(t)},xe.prototype.set=function(t,n){var r=this.__data__;if(r instanceof ye){var e=r.__data__;if(!Qr||e.length<a-1)return e.push([t,n]),this.size=++r.size,this;r=this.__data__=new be(e)}return r.set(t,n),this.size=r.size,this};var Fe=au(Ge),De=au(Ze,!0);function We(t,n){var r=!0;return Fe(t,function(t,e,i){return r=!!n(t,e,i)}),r}function Ue(t,n,r){for(var e=-1,i=t.length;++e<i;){var a=t[e],o=n(a);if(null!=o&&(c===u?o==o&&!Ro(o):r(o,c)))var c=o,s=a}return s}function Be(t,n){var r=[];return Fe(t,function(t,e,i){n(t,e,i)&&r.push(t)}),r}function Pe(t,n,r,e,i){var u=-1,a=t.length;for(r||(r=Pu),i||(i=[]);++u<a;){var o=t[u];n>0&&r(o)?n>1?Pe(o,n-1,r,e,i):nr(i,o):e||(i[i.length]=o)}return i}var He=ou(),qe=ou(!0);function Ge(t,n){return t&&He(t,n,ic)}function Ze(t,n){return t&&qe(t,n,ic)}function Ke(t,n){return Yn(n,function(n){return Co(t[n])})}function Je(t,n){for(var r=0,e=(n=qi(n,t)).length;null!=t&&r<e;)t=t[sa(n[r++])];return r&&r==e?t:u}function Ye(t,n,r){var e=n(t);return mo(t)?e:nr(e,r(t))}function Qe(t){return null==t?t===u?ut:Q:ur&&ur in nn(t)?function(t){var n=fn.call(t,ur),r=t[ur];try{t[ur]=u;var e=!0}catch(t){}var i=dn.call(t);return e&&(n?t[ur]=r:delete t[ur]),i}(t):function(t){return dn.call(t)}(t)}function Xe(t,n){return t>n}function ti(t,n){return null!=t&&fn.call(t,n)}function ni(t,n){return null!=t&&n in nn(t)}function ri(t,n,r){for(var i=r?Xn:Qn,a=t[0].length,o=t.length,c=o,s=e(o),l=1/0,f=[];c--;){var h=t[c];c&&n&&(h=tr(h,mr(n))),l=qr(h.length,l),s[c]=!r&&(n||a>=120&&h.length>=120)?new we(c&&h):u}h=t[0];var p=-1,d=s[0];t:for(;++p<a&&f.length<l;){var v=h[p],g=n?n(v):v;if(v=r||0!==v?v:0,!(d?yr(d,g):i(f,g,r))){for(c=o;--c;){var m=s[c];if(!(m?yr(m,g):i(t[c],g,r)))continue t}d&&d.push(g),f.push(v)}}return f}function ei(t,n,r){var e=null==(t=ta(t,n=qi(n,t)))?t:t[sa(xa(n))];return null==e?u:qn(e,t,r)}function ii(t){return Eo(t)&&Qe(t)==W}function ui(t,n,r,e,i){return t===n||(null==t||null==n||!Eo(t)&&!Eo(n)?t!=t&&n!=n:function(t,n,r,e,i,a){var o=mo(t),c=mo(n),s=o?U:Wu(t),l=c?U:Wu(n),f=(s=s==W?X:s)==X,h=(l=l==W?X:l)==X,p=s==l;if(p&&wo(t)){if(!wo(n))return!1;o=!0,f=!1}if(p&&!f)return a||(a=new xe),o||Lo(t)?Eu(t,n,r,e,i,a):function(t,n,r,e,i,u,a){switch(r){case st:if(t.byteLength!=n.byteLength||t.byteOffset!=n.byteOffset)return!1;t=t.buffer,n=n.buffer;case ct:return!(t.byteLength!=n.byteLength||!u(new An(t),new An(n)));case P:case H:case Y:return ho(+t,+n);case G:return t.name==n.name&&t.message==n.message;case nt:case et:return t==n+"";case J:var o=Ir;case rt:var c=e&v;if(o||(o=Tr),t.size!=n.size&&!c)return!1;var s=a.get(t);if(s)return s==n;e|=g,a.set(t,n);var l=Eu(o(t),o(n),e,i,u,a);return a.delete(t),l;case it:if(fe)return fe.call(t)==fe.call(n)}return!1}(t,n,s,r,e,i,a);if(!(r&v)){var d=f&&fn.call(t,"__wrapped__"),m=h&&fn.call(n,"__wrapped__");if(d||m){var _=d?t.value():t,y=m?n.value():n;return a||(a=new xe),i(_,y,r,e,a)}}return!!p&&(a||(a=new xe),function(t,n,r,e,i,a){var o=r&v,c=Mu(t),s=c.length,l=Mu(n).length;if(s!=l&&!o)return!1;for(var f=s;f--;){var h=c[f];if(!(o?h in n:fn.call(n,h)))return!1}var p=a.get(t);if(p&&a.get(n))return p==n;var d=!0;a.set(t,n),a.set(n,t);for(var g=o;++f<s;){h=c[f];var m=t[h],_=n[h];if(e)var y=o?e(_,m,h,n,t,a):e(m,_,h,t,n,a);if(!(y===u?m===_||i(m,_,r,e,a):y)){d=!1;break}g||(g="constructor"==h)}if(d&&!g){var b=t.constructor,w=n.constructor;b!=w&&"constructor"in t&&"constructor"in n&&!("function"==typeof b&&b instanceof b&&"function"==typeof w&&w instanceof w)&&(d=!1)}return a.delete(t),a.delete(n),d}(t,n,r,e,i,a))}(t,n,r,e,ui,i))}function ai(t,n,r,e){var i=r.length,a=i,o=!e;if(null==t)return!a;for(t=nn(t);i--;){var c=r[i];if(o&&c[2]?c[1]!==t[c[0]]:!(c[0]in t))return!1}for(;++i<a;){var s=(c=r[i])[0],l=t[s],f=c[1];if(o&&c[2]){if(l===u&&!(s in t))return!1}else{var h=new xe;if(e)var p=e(l,f,s,t,n,h);if(!(p===u?ui(f,l,v|g,e,h):p))return!1}}return!0}function oi(t){return!(!ko(t)||(n=t,pn&&pn in n))&&(Co(t)?mn:qt).test(la(t));var n}function ci(t){return"function"==typeof t?t:null==t?Mc:"object"==typeof t?mo(t)?di(t[0],t[1]):pi(t):Fc(t)}function si(t){if(!Ju(t))return Pr(t);var n=[];for(var r in nn(t))fn.call(t,r)&&"constructor"!=r&&n.push(r);return n}function li(t){if(!ko(t))return function(t){var n=[];if(null!=t)for(var r in nn(t))n.push(r);return n}(t);var n=Ju(t),r=[];for(var e in t)("constructor"!=e||!n&&fn.call(t,e))&&r.push(e);return r}function fi(t,n){return t<n}function hi(t,n){var r=-1,i=yo(t)?e(t.length):[];return Fe(t,function(t,e,u){i[++r]=n(t,e,u)}),i}function pi(t){var n=Vu(t);return 1==n.length&&n[0][2]?Qu(n[0][0],n[0][1]):function(r){return r===t||ai(r,t,n)}}function di(t,n){return Gu(t)&&Yu(n)?Qu(sa(t),n):function(r){var e=Xo(r,t);return e===u&&e===n?tc(r,t):ui(n,e,v|g)}}function vi(t,n,r,e,i){t!==n&&He(n,function(a,o){if(ko(a))i||(i=new xe),function(t,n,r,e,i,a,o){var c=na(t,r),s=na(n,r),l=o.get(s);if(l)ke(t,r,l);else{var f=a?a(c,s,r+"",t,n,o):u,h=f===u;if(h){var p=mo(s),d=!p&&wo(s),v=!p&&!d&&Lo(s);f=s,p||d||v?mo(c)?f=c:bo(c)?f=ru(c):d?(h=!1,f=Ji(s,!0)):v?(h=!1,f=Qi(s,!0)):f=[]:zo(s)||go(s)?(f=c,go(c)?f=Po(c):ko(c)&&!Co(c)||(f=Bu(s))):h=!1}h&&(o.set(s,f),i(f,s,e,a,o),o.delete(s)),ke(t,r,f)}}(t,n,o,r,vi,e,i);else{var c=e?e(na(t,o),a,o+"",t,n,i):u;c===u&&(c=a),ke(t,o,c)}},uc)}function gi(t,n){var r=t.length;if(r)return Hu(n+=n<0?r:0,r)?t[n]:u}function mi(t,n,r){var e=-1;return n=tr(n.length?n:[Mc],mr(Ru())),function(t,n){var r=t.length;for(t.sort(n);r--;)t[r]=t[r].value;return t}(hi(t,function(t,r,i){return{criteria:tr(n,function(n){return n(t)}),index:++e,value:t}}),function(t,n){return function(t,n,r){for(var e=-1,i=t.criteria,u=n.criteria,a=i.length,o=r.length;++e<a;){var c=Xi(i[e],u[e]);if(c){if(e>=o)return c;var s=r[e];return c*("desc"==s?-1:1)}}return t.index-n.index}(t,n,r)})}function _i(t,n,r){for(var e=-1,i=n.length,u={};++e<i;){var a=n[e],o=Je(t,a);r(o,a)&&Ii(u,qi(a,t),o)}return u}function yi(t,n,r,e){var i=e?sr:cr,u=-1,a=n.length,o=t;for(t===n&&(n=ru(n)),r&&(o=tr(t,mr(r)));++u<a;)for(var c=0,s=n[u],l=r?r(s):s;(c=i(o,l,c,e))>-1;)o!==t&&Ln.call(o,c,1),Ln.call(t,c,1);return t}function bi(t,n){for(var r=t?n.length:0,e=r-1;r--;){var i=n[r];if(r==e||i!==u){var u=i;Hu(i)?Ln.call(t,i,1):Ni(t,i)}}return t}function wi(t,n){return t+Fr(Kr()*(n-t+1))}function xi(t,n){var r="";if(!t||n<1||n>$)return r;do{n%2&&(r+=t),(n=Fr(n/2))&&(t+=t)}while(n);return r}function Ai(t,n){return ia(Xu(t,n,Mc),t+"")}function Ci(t){return Ce(pc(t))}function Si(t,n){var r=pc(t);return oa(r,$e(n,0,r.length))}function Ii(t,n,r,e){if(!ko(t))return t;for(var i=-1,a=(n=qi(n,t)).length,o=a-1,c=t;null!=c&&++i<a;){var s=sa(n[i]),l=r;if(i!=o){var f=c[s];(l=e?e(f,s,c):u)===u&&(l=ko(f)?f:Hu(n[i+1])?[]:{})}Ee(c,s,l),c=c[s]}return t}var ki=ee?function(t,n){return ee.set(t,n),t}:Mc,Ei=pr?function(t,n){return pr(t,"toString",{configurable:!0,enumerable:!1,value:kc(n),writable:!0})}:Mc;function Ti(t){return oa(pc(t))}function Mi(t,n,r){var i=-1,u=t.length;n<0&&(n=-n>u?0:u+n),(r=r>u?u:r)<0&&(r+=u),u=n>r?0:r-n>>>0,n>>>=0;for(var a=e(u);++i<u;)a[i]=t[i+n];return a}function zi(t,n){var r;return Fe(t,function(t,e,i){return!(r=n(t,e,i))}),!!r}function ji(t,n,r){var e=0,i=null==t?e:t.length;if("number"==typeof n&&n==n&&i<=F){for(;e<i;){var u=e+i>>>1,a=t[u];null!==a&&!Ro(a)&&(r?a<=n:a<n)?e=u+1:i=u}return i}return Oi(t,n,Mc,r)}function Oi(t,n,r,e){n=r(n);for(var i=0,a=null==t?0:t.length,o=n!=n,c=null===n,s=Ro(n),l=n===u;i<a;){var f=Fr((i+a)/2),h=r(t[f]),p=h!==u,d=null===h,v=h==h,g=Ro(h);if(o)var m=e||v;else m=l?v&&(e||p):c?v&&p&&(e||!d):s?v&&p&&!d&&(e||!g):!d&&!g&&(e?h<=n:h<n);m?i=f+1:a=f}return qr(a,N)}function $i(t,n){for(var r=-1,e=t.length,i=0,u=[];++r<e;){var a=t[r],o=n?n(a):a;if(!r||!ho(o,c)){var c=o;u[i++]=0===a?0:a}}return u}function Ri(t){return"number"==typeof t?t:Ro(t)?L:+t}function Li(t){if("string"==typeof t)return t;if(mo(t))return tr(t,Li)+"";if(Ro(t))return he?he.call(t):"";var n=t+"";return"0"==n&&1/t==-O?"-0":n}function Vi(t,n,r){var e=-1,i=Qn,u=t.length,o=!0,c=[],s=c;if(r)o=!1,i=Xn;else if(u>=a){var l=n?null:xu(t);if(l)return Tr(l);o=!1,i=yr,s=new we}else s=n?[]:c;t:for(;++e<u;){var f=t[e],h=n?n(f):f;if(f=r||0!==f?f:0,o&&h==h){for(var p=s.length;p--;)if(s[p]===h)continue t;n&&s.push(h),c.push(f)}else i(s,h,r)||(s!==c&&s.push(h),c.push(f))}return c}function Ni(t,n){return null==(t=ta(t,n=qi(n,t)))||delete t[sa(xa(n))]}function Fi(t,n,r,e){return Ii(t,n,r(Je(t,n)),e)}function Di(t,n,r,e){for(var i=t.length,u=e?i:-1;(e?u--:++u<i)&&n(t[u],u,t););return r?Mi(t,e?0:u,e?u+1:i):Mi(t,e?u+1:0,e?i:u)}function Wi(t,n){var r=t;return r instanceof me&&(r=r.value()),rr(n,function(t,n){return n.func.apply(n.thisArg,nr([t],n.args))},r)}function Ui(t,n,r){var i=t.length;if(i<2)return i?Vi(t[0]):[];for(var u=-1,a=e(i);++u<i;)for(var o=t[u],c=-1;++c<i;)c!=u&&(a[u]=Ne(a[u]||o,t[c],n,r));return Vi(Pe(a,1),n,r)}function Bi(t,n,r){for(var e=-1,i=t.length,a=n.length,o={};++e<i;){var c=e<a?n[e]:u;r(o,t[e],c)}return o}function Pi(t){return bo(t)?t:[]}function Hi(t){return"function"==typeof t?t:Mc}function qi(t,n){return mo(t)?t:Gu(t,n)?[t]:ca(Ho(t))}var Gi=Ai;function Zi(t,n,r){var e=t.length;return r=r===u?e:r,!n&&r>=e?t:Mi(t,n,r)}var Ki=Rr||function(t){return $n.clearTimeout(t)};function Ji(t,n){if(n)return t.slice();var r=t.length,e=Tn?Tn(r):new t.constructor(r);return t.copy(e),e}function Yi(t){var n=new t.constructor(t.byteLength);return new An(n).set(new An(t)),n}function Qi(t,n){var r=n?Yi(t.buffer):t.buffer;return new t.constructor(r,t.byteOffset,t.length)}function Xi(t,n){if(t!==n){var r=t!==u,e=null===t,i=t==t,a=Ro(t),o=n!==u,c=null===n,s=n==n,l=Ro(n);if(!c&&!l&&!a&&t>n||a&&o&&s&&!c&&!l||e&&o&&s||!r&&s||!i)return 1;if(!e&&!a&&!l&&t<n||l&&r&&i&&!e&&!a||c&&r&&i||!o&&i||!s)return-1}return 0}function tu(t,n,r,i){for(var u=-1,a=t.length,o=r.length,c=-1,s=n.length,l=Hr(a-o,0),f=e(s+l),h=!i;++c<s;)f[c]=n[c];for(;++u<o;)(h||u<a)&&(f[r[u]]=t[u]);for(;l--;)f[c++]=t[u++];return f}function nu(t,n,r,i){for(var u=-1,a=t.length,o=-1,c=r.length,s=-1,l=n.length,f=Hr(a-c,0),h=e(f+l),p=!i;++u<f;)h[u]=t[u];for(var d=u;++s<l;)h[d+s]=n[s];for(;++o<c;)(p||u<a)&&(h[d+r[o]]=t[u++]);return h}function ru(t,n){var r=-1,i=t.length;for(n||(n=e(i));++r<i;)n[r]=t[r];return n}function eu(t,n,r,e){var i=!r;r||(r={});for(var a=-1,o=n.length;++a<o;){var c=n[a],s=e?e(r[c],t[c],c,r,t):u;s===u&&(s=t[c]),i?je(r,c,s):Ee(r,c,s)}return r}function iu(t,n){return function(r,e){var i=mo(r)?Gn:Me,u=n?n():{};return i(r,t,Ru(e,2),u)}}function uu(t){return Ai(function(n,r){var e=-1,i=r.length,a=i>1?r[i-1]:u,o=i>2?r[2]:u;for(a=t.length>3&&"function"==typeof a?(i--,a):u,o&&qu(r[0],r[1],o)&&(a=i<3?u:a,i=1),n=nn(n);++e<i;){var c=r[e];c&&t(n,c,e,a)}return n})}function au(t,n){return function(r,e){if(null==r)return r;if(!yo(r))return t(r,e);for(var i=r.length,u=n?i:-1,a=nn(r);(n?u--:++u<i)&&!1!==e(a[u],u,a););return r}}function ou(t){return function(n,r,e){for(var i=-1,u=nn(n),a=e(n),o=a.length;o--;){var c=a[t?o:++i];if(!1===r(u[c],c,u))break}return n}}function cu(t){return function(n){var r=Sr(n=Ho(n))?jr(n):u,e=r?r[0]:n.charAt(0),i=r?Zi(r,1).join(""):n.slice(1);return e[t]()+i}}function su(t){return function(n){return rr(Cc(gc(n).replace(yn,"")),t,"")}}function lu(t){return function(){var n=arguments;switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3]);case 5:return new t(n[0],n[1],n[2],n[3],n[4]);case 6:return new t(n[0],n[1],n[2],n[3],n[4],n[5]);case 7:return new t(n[0],n[1],n[2],n[3],n[4],n[5],n[6])}var r=de(t.prototype),e=t.apply(r,n);return ko(e)?e:r}}function fu(t){return function(n,r,e){var i=nn(n);if(!yo(n)){var a=Ru(r,3);n=ic(n),r=function(t){return a(i[t],t,i)}}var o=t(n,r,e);return o>-1?i[a?n[o]:o]:u}}function hu(t){return Tu(function(n){var r=n.length,e=r,i=ge.prototype.thru;for(t&&n.reverse();e--;){var a=n[e];if("function"!=typeof a)throw new un(c);if(i&&!o&&"wrapper"==Ou(a))var o=new ge([],!0)}for(e=o?e:r;++e<r;){var s=Ou(a=n[e]),l="wrapper"==s?ju(a):u;o=l&&Zu(l[0])&&l[1]==(C|b|x|S)&&!l[4].length&&1==l[9]?o[Ou(l[0])].apply(o,l[3]):1==a.length&&Zu(a)?o[s]():o.thru(a)}return function(){var t=arguments,e=t[0];if(o&&1==t.length&&mo(e))return o.plant(e).value();for(var i=0,u=r?n[i].apply(this,t):e;++i<r;)u=n[i].call(this,u);return u}})}function pu(t,n,r,i,a,o,c,s,l,f){var h=n&C,p=n&m,d=n&_,v=n&(b|w),g=n&I,y=d?u:lu(t);return function m(){for(var _=arguments.length,b=e(_),w=_;w--;)b[w]=arguments[w];if(v)var x=$u(m),A=function(t,n){for(var r=t.length,e=0;r--;)t[r]===n&&++e;return e}(b,x);if(i&&(b=tu(b,i,a,v)),o&&(b=nu(b,o,c,v)),_-=A,v&&_<f){var C=Er(b,x);return bu(t,n,pu,m.placeholder,r,b,C,s,l,f-_)}var S=p?r:this,I=d?S[t]:t;return _=b.length,s?b=function(t,n){for(var r=t.length,e=qr(n.length,r),i=ru(t);e--;){var a=n[e];t[e]=Hu(a,r)?i[a]:u}return t}(b,s):g&&_>1&&b.reverse(),h&&l<_&&(b.length=l),this&&this!==$n&&this instanceof m&&(I=y||lu(I)),I.apply(S,b)}}function du(t,n){return function(r,e){return function(t,n,r,e){return Ge(t,function(t,i,u){n(e,r(t),i,u)}),e}(r,t,n(e),{})}}function vu(t,n){return function(r,e){var i;if(r===u&&e===u)return n;if(r!==u&&(i=r),e!==u){if(i===u)return e;"string"==typeof r||"string"==typeof e?(r=Li(r),e=Li(e)):(r=Ri(r),e=Ri(e)),i=t(r,e)}return i}}function gu(t){return Tu(function(n){return n=tr(n,mr(Ru())),Ai(function(r){var e=this;return t(n,function(t){return qn(t,e,r)})})})}function mu(t,n){var r=(n=n===u?" ":Li(n)).length;if(r<2)return r?xi(n,t):n;var e=xi(n,Nr(t/zr(n)));return Sr(n)?Zi(jr(e),0,t).join(""):e.slice(0,t)}function _u(t){return function(n,r,i){return i&&"number"!=typeof i&&qu(n,r,i)&&(r=i=u),n=Do(n),r===u?(r=n,n=0):r=Do(r),function(t,n,r,i){for(var u=-1,a=Hr(Nr((n-t)/(r||1)),0),o=e(a);a--;)o[i?a:++u]=t,t+=r;return o}(n,r,i=i===u?n<r?1:-1:Do(i),t)}}function yu(t){return function(n,r){return"string"==typeof n&&"string"==typeof r||(n=Bo(n),r=Bo(r)),t(n,r)}}function bu(t,n,r,e,i,a,o,c,s,l){var f=n&b;n|=f?x:A,(n&=~(f?A:x))&y||(n&=~(m|_));var h=[t,n,i,f?a:u,f?o:u,f?u:a,f?u:o,c,s,l],p=r.apply(u,h);return Zu(t)&&ra(p,h),p.placeholder=e,ua(p,t,n)}function wu(t){var n=tn[t];return function(t,r){if(t=Bo(t),r=null==r?0:qr(Wo(r),292)){var e=(Ho(t)+"e").split("e");return+((e=(Ho(n(e[0]+"e"+(+e[1]+r)))+"e").split("e"))[0]+"e"+(+e[1]-r))}return n(t)}}var xu=te&&1/Tr(new te([,-0]))[1]==O?function(t){return new te(t)}:Rc;function Au(t){return function(n){var r=Wu(n);return r==J?Ir(n):r==rt?Mr(n):function(t,n){return tr(n,function(n){return[n,t[n]]})}(n,t(n))}}function Cu(t,n,r,i,a,o,s,l){var h=n&_;if(!h&&"function"!=typeof t)throw new un(c);var p=i?i.length:0;if(p||(n&=~(x|A),i=a=u),s=s===u?s:Hr(Wo(s),0),l=l===u?l:Wo(l),p-=a?a.length:0,n&A){var d=i,v=a;i=a=u}var g=h?u:ju(t),I=[t,n,r,i,a,d,v,o,s,l];if(g&&function(t,n){var r=t[1],e=n[1],i=r|e,u=i<(m|_|C),a=e==C&&r==b||e==C&&r==S&&t[7].length<=n[8]||e==(C|S)&&n[7].length<=n[8]&&r==b;if(!u&&!a)return t;e&m&&(t[2]=n[2],i|=r&m?0:y);var o=n[3];if(o){var c=t[3];t[3]=c?tu(c,o,n[4]):o,t[4]=c?Er(t[3],f):n[4]}(o=n[5])&&(c=t[5],t[5]=c?nu(c,o,n[6]):o,t[6]=c?Er(t[5],f):n[6]),(o=n[7])&&(t[7]=o),e&C&&(t[8]=null==t[8]?n[8]:qr(t[8],n[8])),null==t[9]&&(t[9]=n[9]),t[0]=n[0],t[1]=i}(I,g),t=I[0],n=I[1],r=I[2],i=I[3],a=I[4],!(l=I[9]=I[9]===u?h?0:t.length:Hr(I[9]-p,0))&&n&(b|w)&&(n&=~(b|w)),n&&n!=m)k=n==b||n==w?function(t,n,r){var i=lu(t);return function a(){for(var o=arguments.length,c=e(o),s=o,l=$u(a);s--;)c[s]=arguments[s];var f=o<3&&c[0]!==l&&c[o-1]!==l?[]:Er(c,l);return(o-=f.length)<r?bu(t,n,pu,a.placeholder,u,c,f,u,u,r-o):qn(this&&this!==$n&&this instanceof a?i:t,this,c)}}(t,n,l):n!=x&&n!=(m|x)||a.length?pu.apply(u,I):function(t,n,r,i){var u=n&m,a=lu(t);return function n(){for(var o=-1,c=arguments.length,s=-1,l=i.length,f=e(l+c),h=this&&this!==$n&&this instanceof n?a:t;++s<l;)f[s]=i[s];for(;c--;)f[s++]=arguments[++o];return qn(h,u?r:this,f)}}(t,n,r,i);else var k=function(t,n,r){var e=n&m,i=lu(t);return function n(){return(this&&this!==$n&&this instanceof n?i:t).apply(e?r:this,arguments)}}(t,n,r);return ua((g?ki:ra)(k,I),t,n)}function Su(t,n,r,e){return t===u||ho(t,cn[r])&&!fn.call(e,r)?n:t}function Iu(t,n,r,e,i,a){return ko(t)&&ko(n)&&(a.set(n,t),vi(t,n,u,Iu,a),a.delete(n)),t}function ku(t){return zo(t)?u:t}function Eu(t,n,r,e,i,a){var o=r&v,c=t.length,s=n.length;if(c!=s&&!(o&&s>c))return!1;var l=a.get(t);if(l&&a.get(n))return l==n;var f=-1,h=!0,p=r&g?new we:u;for(a.set(t,n),a.set(n,t);++f<c;){var d=t[f],m=n[f];if(e)var _=o?e(m,d,f,n,t,a):e(d,m,f,t,n,a);if(_!==u){if(_)continue;h=!1;break}if(p){if(!ir(n,function(t,n){if(!yr(p,n)&&(d===t||i(d,t,r,e,a)))return p.push(n)})){h=!1;break}}else if(d!==m&&!i(d,m,r,e,a)){h=!1;break}}return a.delete(t),a.delete(n),h}function Tu(t){return ia(Xu(t,u,ma),t+"")}function Mu(t){return Ye(t,ic,Fu)}function zu(t){return Ye(t,uc,Du)}var ju=ee?function(t){return ee.get(t)}:Rc;function Ou(t){for(var n=t.name+"",r=ie[n],e=fn.call(ie,n)?r.length:0;e--;){var i=r[e],u=i.func;if(null==u||u==t)return i.name}return n}function $u(t){return(fn.call(pe,"placeholder")?pe:t).placeholder}function Ru(){var t=pe.iteratee||zc;return t=t===zc?ci:t,arguments.length?t(arguments[0],arguments[1]):t}function Lu(t,n){var r,e,i=t.__data__;return("string"==(e=typeof(r=n))||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==r:null===r)?i["string"==typeof n?"string":"hash"]:i.map}function Vu(t){for(var n=ic(t),r=n.length;r--;){var e=n[r],i=t[e];n[r]=[e,i,Yu(i)]}return n}function Nu(t,n){var r=function(t,n){return null==t?u:t[n]}(t,n);return oi(r)?r:u}var Fu=Dr?function(t){return null==t?[]:(t=nn(t),Yn(Dr(t),function(n){return Rn.call(t,n)}))}:Uc,Du=Dr?function(t){for(var n=[];t;)nr(n,Fu(t)),t=jn(t);return n}:Uc,Wu=Qe;function Uu(t,n,r){for(var e=-1,i=(n=qi(n,t)).length,u=!1;++e<i;){var a=sa(n[e]);if(!(u=null!=t&&r(t,a)))break;t=t[a]}return u||++e!=i?u:!!(i=null==t?0:t.length)&&Io(i)&&Hu(a,i)&&(mo(t)||go(t))}function Bu(t){return"function"!=typeof t.constructor||Ju(t)?{}:de(jn(t))}function Pu(t){return mo(t)||go(t)||!!(Nn&&t&&t[Nn])}function Hu(t,n){var r=typeof t;return!!(n=null==n?$:n)&&("number"==r||"symbol"!=r&&Zt.test(t))&&t>-1&&t%1==0&&t<n}function qu(t,n,r){if(!ko(r))return!1;var e=typeof n;return!!("number"==e?yo(r)&&Hu(n,r.length):"string"==e&&n in r)&&ho(r[n],t)}function Gu(t,n){if(mo(t))return!1;var r=typeof t;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=t&&!Ro(t))||Mt.test(t)||!Tt.test(t)||null!=n&&t in nn(n)}function Zu(t){var n=Ou(t),r=pe[n];if("function"!=typeof r||!(n in me.prototype))return!1;if(t===r)return!0;var e=ju(r);return!!e&&t===e[0]}(Yr&&Wu(new Yr(new ArrayBuffer(1)))!=st||Qr&&Wu(new Qr)!=J||Xr&&"[object Promise]"!=Wu(Xr.resolve())||te&&Wu(new te)!=rt||ne&&Wu(new ne)!=at)&&(Wu=function(t){var n=Qe(t),r=n==X?t.constructor:u,e=r?la(r):"";if(e)switch(e){case ue:return st;case ae:return J;case oe:return"[object Promise]";case ce:return rt;case se:return at}return n});var Ku=sn?Co:Bc;function Ju(t){var n=t&&t.constructor;return t===("function"==typeof n&&n.prototype||cn)}function Yu(t){return t==t&&!ko(t)}function Qu(t,n){return function(r){return null!=r&&r[t]===n&&(n!==u||t in nn(r))}}function Xu(t,n,r){return n=Hr(n===u?t.length-1:n,0),function(){for(var i=arguments,u=-1,a=Hr(i.length-n,0),o=e(a);++u<a;)o[u]=i[n+u];u=-1;for(var c=e(n+1);++u<n;)c[u]=i[u];return c[n]=r(o),qn(t,this,c)}}function ta(t,n){return n.length<2?t:Je(t,Mi(n,0,-1))}function na(t,n){if("__proto__"!=n)return t[n]}var ra=aa(ki),ea=Vr||function(t,n){return $n.setTimeout(t,n)},ia=aa(Ei);function ua(t,n,r){var e=n+"";return ia(t,function(t,n){var r=n.length;if(!r)return t;var e=r-1;return n[e]=(r>1?"& ":"")+n[e],n=n.join(r>2?", ":" "),t.replace(Vt,"{\n/* [wrapped with "+n+"] */\n")}(e,function(t,n){return Zn(D,function(r){var e="_."+r[0];n&r[1]&&!Qn(t,e)&&t.push(e)}),t.sort()}(function(t){var n=t.match(Nt);return n?n[1].split(Ft):[]}(e),r)))}function aa(t){var n=0,r=0;return function(){var e=Gr(),i=M-(e-r);if(r=e,i>0){if(++n>=T)return arguments[0]}else n=0;return t.apply(u,arguments)}}function oa(t,n){var r=-1,e=t.length,i=e-1;for(n=n===u?e:n;++r<n;){var a=wi(r,i),o=t[a];t[a]=t[r],t[r]=o}return t.length=n,t}var ca=function(t){var n=ao(t,function(t){return r.size===l&&r.clear(),t}),r=n.cache;return n}(function(t){var n=[];return 46===t.charCodeAt(0)&&n.push(""),t.replace(zt,function(t,r,e,i){n.push(e?i.replace(Wt,"$1"):r||t)}),n});function sa(t){if("string"==typeof t||Ro(t))return t;var n=t+"";return"0"==n&&1/t==-O?"-0":n}function la(t){if(null!=t){try{return ln.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function fa(t){if(t instanceof me)return t.clone();var n=new ge(t.__wrapped__,t.__chain__);return n.__actions__=ru(t.__actions__),n.__index__=t.__index__,n.__values__=t.__values__,n}var ha=Ai(function(t,n){return bo(t)?Ne(t,Pe(n,1,bo,!0)):[]}),pa=Ai(function(t,n){var r=xa(n);return bo(r)&&(r=u),bo(t)?Ne(t,Pe(n,1,bo,!0),Ru(r,2)):[]}),da=Ai(function(t,n){var r=xa(n);return bo(r)&&(r=u),bo(t)?Ne(t,Pe(n,1,bo,!0),u,r):[]});function va(t,n,r){var e=null==t?0:t.length;if(!e)return-1;var i=null==r?0:Wo(r);return i<0&&(i=Hr(e+i,0)),or(t,Ru(n,3),i)}function ga(t,n,r){var e=null==t?0:t.length;if(!e)return-1;var i=e-1;return r!==u&&(i=Wo(r),i=r<0?Hr(e+i,0):qr(i,e-1)),or(t,Ru(n,3),i,!0)}function ma(t){return null!=t&&t.length?Pe(t,1):[]}function _a(t){return t&&t.length?t[0]:u}var ya=Ai(function(t){var n=tr(t,Pi);return n.length&&n[0]===t[0]?ri(n):[]}),ba=Ai(function(t){var n=xa(t),r=tr(t,Pi);return n===xa(r)?n=u:r.pop(),r.length&&r[0]===t[0]?ri(r,Ru(n,2)):[]}),wa=Ai(function(t){var n=xa(t),r=tr(t,Pi);return(n="function"==typeof n?n:u)&&r.pop(),r.length&&r[0]===t[0]?ri(r,u,n):[]});function xa(t){var n=null==t?0:t.length;return n?t[n-1]:u}var Aa=Ai(Ca);function Ca(t,n){return t&&t.length&&n&&n.length?yi(t,n):t}var Sa=Tu(function(t,n){var r=null==t?0:t.length,e=Oe(t,n);return bi(t,tr(n,function(t){return Hu(t,r)?+t:t}).sort(Xi)),e});function Ia(t){return null==t?t:Jr.call(t)}var ka=Ai(function(t){return Vi(Pe(t,1,bo,!0))}),Ea=Ai(function(t){var n=xa(t);return bo(n)&&(n=u),Vi(Pe(t,1,bo,!0),Ru(n,2))}),Ta=Ai(function(t){var n=xa(t);return n="function"==typeof n?n:u,Vi(Pe(t,1,bo,!0),u,n)});function Ma(t){if(!t||!t.length)return[];var n=0;return t=Yn(t,function(t){if(bo(t))return n=Hr(t.length,n),!0}),gr(n,function(n){return tr(t,hr(n))})}function za(t,n){if(!t||!t.length)return[];var r=Ma(t);return null==n?r:tr(r,function(t){return qn(n,u,t)})}var ja=Ai(function(t,n){return bo(t)?Ne(t,n):[]}),Oa=Ai(function(t){return Ui(Yn(t,bo))}),$a=Ai(function(t){var n=xa(t);return bo(n)&&(n=u),Ui(Yn(t,bo),Ru(n,2))}),Ra=Ai(function(t){var n=xa(t);return n="function"==typeof n?n:u,Ui(Yn(t,bo),u,n)}),La=Ai(Ma);var Va=Ai(function(t){var n=t.length,r=n>1?t[n-1]:u;return r="function"==typeof r?(t.pop(),r):u,za(t,r)});function Na(t){var n=pe(t);return n.__chain__=!0,n}function Fa(t,n){return n(t)}var Da=Tu(function(t){var n=t.length,r=n?t[0]:0,e=this.__wrapped__,i=function(n){return Oe(n,t)};return!(n>1||this.__actions__.length)&&e instanceof me&&Hu(r)?((e=e.slice(r,+r+(n?1:0))).__actions__.push({func:Fa,args:[i],thisArg:u}),new ge(e,this.__chain__).thru(function(t){return n&&!t.length&&t.push(u),t})):this.thru(i)});var Wa=iu(function(t,n,r){fn.call(t,r)?++t[r]:je(t,r,1)});var Ua=fu(va),Ba=fu(ga);function Pa(t,n){return(mo(t)?Zn:Fe)(t,Ru(n,3))}function Ha(t,n){return(mo(t)?Kn:De)(t,Ru(n,3))}var qa=iu(function(t,n,r){fn.call(t,r)?t[r].push(n):je(t,r,[n])});var Ga=Ai(function(t,n,r){var i=-1,u="function"==typeof n,a=yo(t)?e(t.length):[];return Fe(t,function(t){a[++i]=u?qn(n,t,r):ei(t,n,r)}),a}),Za=iu(function(t,n,r){je(t,r,n)});function Ka(t,n){return(mo(t)?tr:hi)(t,Ru(n,3))}var Ja=iu(function(t,n,r){t[r?0:1].push(n)},function(){return[[],[]]});var Ya=Ai(function(t,n){if(null==t)return[];var r=n.length;return r>1&&qu(t,n[0],n[1])?n=[]:r>2&&qu(n[0],n[1],n[2])&&(n=[n[0]]),mi(t,Pe(n,1),[])}),Qa=Lr||function(){return $n.Date.now()};function Xa(t,n,r){return n=r?u:n,n=t&&null==n?t.length:n,Cu(t,C,u,u,u,u,n)}function to(t,n){var r;if("function"!=typeof n)throw new un(c);return t=Wo(t),function(){return--t>0&&(r=n.apply(this,arguments)),t<=1&&(n=u),r}}var no=Ai(function(t,n,r){var e=m;if(r.length){var i=Er(r,$u(no));e|=x}return Cu(t,e,n,r,i)}),ro=Ai(function(t,n,r){var e=m|_;if(r.length){var i=Er(r,$u(ro));e|=x}return Cu(n,e,t,r,i)});function eo(t,n,r){var e,i,a,o,s,l,f=0,h=!1,p=!1,d=!0;if("function"!=typeof t)throw new un(c);function v(n){var r=e,a=i;return e=i=u,f=n,o=t.apply(a,r)}function g(t){var r=t-l;return l===u||r>=n||r<0||p&&t-f>=a}function m(){var t=Qa();if(g(t))return _(t);s=ea(m,function(t){var r=n-(t-l);return p?qr(r,a-(t-f)):r}(t))}function _(t){return s=u,d&&e?v(t):(e=i=u,o)}function y(){var t=Qa(),r=g(t);if(e=arguments,i=this,l=t,r){if(s===u)return function(t){return f=t,s=ea(m,n),h?v(t):o}(l);if(p)return s=ea(m,n),v(l)}return s===u&&(s=ea(m,n)),o}return n=Bo(n)||0,ko(r)&&(h=!!r.leading,a=(p="maxWait"in r)?Hr(Bo(r.maxWait)||0,n):a,d="trailing"in r?!!r.trailing:d),y.cancel=function(){s!==u&&Ki(s),f=0,e=l=i=s=u},y.flush=function(){return s===u?o:_(Qa())},y}var io=Ai(function(t,n){return Ve(t,1,n)}),uo=Ai(function(t,n,r){return Ve(t,Bo(n)||0,r)});function ao(t,n){if("function"!=typeof t||null!=n&&"function"!=typeof n)throw new un(c);var r=function(){var e=arguments,i=n?n.apply(this,e):e[0],u=r.cache;if(u.has(i))return u.get(i);var a=t.apply(this,e);return r.cache=u.set(i,a)||u,a};return r.cache=new(ao.Cache||be),r}function oo(t){if("function"!=typeof t)throw new un(c);return function(){var n=arguments;switch(n.length){case 0:return!t.call(this);case 1:return!t.call(this,n[0]);case 2:return!t.call(this,n[0],n[1]);case 3:return!t.call(this,n[0],n[1],n[2])}return!t.apply(this,n)}}ao.Cache=be;var co=Gi(function(t,n){var r=(n=1==n.length&&mo(n[0])?tr(n[0],mr(Ru())):tr(Pe(n,1),mr(Ru()))).length;return Ai(function(e){for(var i=-1,u=qr(e.length,r);++i<u;)e[i]=n[i].call(this,e[i]);return qn(t,this,e)})}),so=Ai(function(t,n){var r=Er(n,$u(so));return Cu(t,x,u,n,r)}),lo=Ai(function(t,n){var r=Er(n,$u(lo));return Cu(t,A,u,n,r)}),fo=Tu(function(t,n){return Cu(t,S,u,u,u,n)});function ho(t,n){return t===n||t!=t&&n!=n}var po=yu(Xe),vo=yu(function(t,n){return t>=n}),go=ii(function(){return arguments}())?ii:function(t){return Eo(t)&&fn.call(t,"callee")&&!Rn.call(t,"callee")},mo=e.isArray,_o=Dn?mr(Dn):function(t){return Eo(t)&&Qe(t)==ct};function yo(t){return null!=t&&Io(t.length)&&!Co(t)}function bo(t){return Eo(t)&&yo(t)}var wo=Wr||Bc,xo=Wn?mr(Wn):function(t){return Eo(t)&&Qe(t)==H};function Ao(t){if(!Eo(t))return!1;var n=Qe(t);return n==G||n==q||"string"==typeof t.message&&"string"==typeof t.name&&!zo(t)}function Co(t){if(!ko(t))return!1;var n=Qe(t);return n==Z||n==K||n==B||n==tt}function So(t){return"number"==typeof t&&t==Wo(t)}function Io(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=$}function ko(t){var n=typeof t;return null!=t&&("object"==n||"function"==n)}function Eo(t){return null!=t&&"object"==typeof t}var To=Un?mr(Un):function(t){return Eo(t)&&Wu(t)==J};function Mo(t){return"number"==typeof t||Eo(t)&&Qe(t)==Y}function zo(t){if(!Eo(t)||Qe(t)!=X)return!1;var n=jn(t);if(null===n)return!0;var r=fn.call(n,"constructor")&&n.constructor;return"function"==typeof r&&r instanceof r&&ln.call(r)==vn}var jo=Bn?mr(Bn):function(t){return Eo(t)&&Qe(t)==nt};var Oo=Pn?mr(Pn):function(t){return Eo(t)&&Wu(t)==rt};function $o(t){return"string"==typeof t||!mo(t)&&Eo(t)&&Qe(t)==et}function Ro(t){return"symbol"==typeof t||Eo(t)&&Qe(t)==it}var Lo=Hn?mr(Hn):function(t){return Eo(t)&&Io(t.length)&&!!kn[Qe(t)]};var Vo=yu(fi),No=yu(function(t,n){return t<=n});function Fo(t){if(!t)return[];if(yo(t))return $o(t)?jr(t):ru(t);if(Fn&&t[Fn])return function(t){for(var n,r=[];!(n=t.next()).done;)r.push(n.value);return r}(t[Fn]());var n=Wu(t);return(n==J?Ir:n==rt?Tr:pc)(t)}function Do(t){return t?(t=Bo(t))===O||t===-O?(t<0?-1:1)*R:t==t?t:0:0===t?t:0}function Wo(t){var n=Do(t),r=n%1;return n==n?r?n-r:n:0}function Uo(t){return t?$e(Wo(t),0,V):0}function Bo(t){if("number"==typeof t)return t;if(Ro(t))return L;if(ko(t)){var n="function"==typeof t.valueOf?t.valueOf():t;t=ko(n)?n+"":n}if("string"!=typeof t)return 0===t?t:+t;t=t.replace($t,"");var r=Ht.test(t);return r||Gt.test(t)?zn(t.slice(2),r?2:8):Pt.test(t)?L:+t}function Po(t){return eu(t,uc(t))}function Ho(t){return null==t?"":Li(t)}var qo=uu(function(t,n){if(Ju(n)||yo(n))eu(n,ic(n),t);else for(var r in n)fn.call(n,r)&&Ee(t,r,n[r])}),Go=uu(function(t,n){eu(n,uc(n),t)}),Zo=uu(function(t,n,r,e){eu(n,uc(n),t,e)}),Ko=uu(function(t,n,r,e){eu(n,ic(n),t,e)}),Jo=Tu(Oe);var Yo=Ai(function(t,n){t=nn(t);var r=-1,e=n.length,i=e>2?n[2]:u;for(i&&qu(n[0],n[1],i)&&(e=1);++r<e;)for(var a=n[r],o=uc(a),c=-1,s=o.length;++c<s;){var l=o[c],f=t[l];(f===u||ho(f,cn[l])&&!fn.call(t,l))&&(t[l]=a[l])}return t}),Qo=Ai(function(t){return t.push(u,Iu),qn(oc,u,t)});function Xo(t,n,r){var e=null==t?u:Je(t,n);return e===u?r:e}function tc(t,n){return null!=t&&Uu(t,n,ni)}var nc=du(function(t,n,r){null!=n&&"function"!=typeof n.toString&&(n=dn.call(n)),t[n]=r},kc(Mc)),rc=du(function(t,n,r){null!=n&&"function"!=typeof n.toString&&(n=dn.call(n)),fn.call(t,n)?t[n].push(r):t[n]=[r]},Ru),ec=Ai(ei);function ic(t){return yo(t)?Ae(t):si(t)}function uc(t){return yo(t)?Ae(t,!0):li(t)}var ac=uu(function(t,n,r){vi(t,n,r)}),oc=uu(function(t,n,r,e){vi(t,n,r,e)}),cc=Tu(function(t,n){var r={};if(null==t)return r;var e=!1;n=tr(n,function(n){return n=qi(n,t),e||(e=n.length>1),n}),eu(t,zu(t),r),e&&(r=Re(r,h|p|d,ku));for(var i=n.length;i--;)Ni(r,n[i]);return r});var sc=Tu(function(t,n){return null==t?{}:function(t,n){return _i(t,n,function(n,r){return tc(t,r)})}(t,n)});function lc(t,n){if(null==t)return{};var r=tr(zu(t),function(t){return[t]});return n=Ru(n),_i(t,r,function(t,r){return n(t,r[0])})}var fc=Au(ic),hc=Au(uc);function pc(t){return null==t?[]:_r(t,ic(t))}var dc=su(function(t,n,r){return n=n.toLowerCase(),t+(r?vc(n):n)});function vc(t){return Ac(Ho(t).toLowerCase())}function gc(t){return(t=Ho(t))&&t.replace(Kt,xr).replace(bn,"")}var mc=su(function(t,n,r){return t+(r?"-":"")+n.toLowerCase()}),_c=su(function(t,n,r){return t+(r?" ":"")+n.toLowerCase()}),yc=cu("toLowerCase");var bc=su(function(t,n,r){return t+(r?"_":"")+n.toLowerCase()});var wc=su(function(t,n,r){return t+(r?" ":"")+Ac(n)});var xc=su(function(t,n,r){return t+(r?" ":"")+n.toUpperCase()}),Ac=cu("toUpperCase");function Cc(t,n,r){return t=Ho(t),(n=r?u:n)===u?function(t){return Cn.test(t)}(t)?function(t){return t.match(xn)||[]}(t):function(t){return t.match(Dt)||[]}(t):t.match(n)||[]}var Sc=Ai(function(t,n){try{return qn(t,u,n)}catch(t){return Ao(t)?t:new Qt(t)}}),Ic=Tu(function(t,n){return Zn(n,function(n){n=sa(n),je(t,n,no(t[n],t))}),t});function kc(t){return function(){return t}}var Ec=hu(),Tc=hu(!0);function Mc(t){return t}function zc(t){return ci("function"==typeof t?t:Re(t,h))}var jc=Ai(function(t,n){return function(r){return ei(r,t,n)}}),Oc=Ai(function(t,n){return function(r){return ei(t,r,n)}});function $c(t,n,r){var e=ic(n),i=Ke(n,e);null!=r||ko(n)&&(i.length||!e.length)||(r=n,n=t,t=this,i=Ke(n,ic(n)));var u=!(ko(r)&&"chain"in r&&!r.chain),a=Co(t);return Zn(i,function(r){var e=n[r];t[r]=e,a&&(t.prototype[r]=function(){var n=this.__chain__;if(u||n){var r=t(this.__wrapped__);return(r.__actions__=ru(this.__actions__)).push({func:e,args:arguments,thisArg:t}),r.__chain__=n,r}return e.apply(t,nr([this.value()],arguments))})}),t}function Rc(){}var Lc=gu(tr),Vc=gu(Jn),Nc=gu(ir);function Fc(t){return Gu(t)?hr(sa(t)):function(t){return function(n){return Je(n,t)}}(t)}var Dc=_u(),Wc=_u(!0);function Uc(){return[]}function Bc(){return!1}var Pc=vu(function(t,n){return t+n},0),Hc=wu("ceil"),qc=vu(function(t,n){return t/n},1),Gc=wu("floor");var Zc,Kc=vu(function(t,n){return t*n},1),Jc=wu("round"),Yc=vu(function(t,n){return t-n},0);return pe.after=function(t,n){if("function"!=typeof n)throw new un(c);return t=Wo(t),function(){if(--t<1)return n.apply(this,arguments)}},pe.ary=Xa,pe.assign=qo,pe.assignIn=Go,pe.assignInWith=Zo,pe.assignWith=Ko,pe.at=Jo,pe.before=to,pe.bind=no,pe.bindAll=Ic,pe.bindKey=ro,pe.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return mo(t)?t:[t]},pe.chain=Na,pe.chunk=function(t,n,r){n=(r?qu(t,n,r):n===u)?1:Hr(Wo(n),0);var i=null==t?0:t.length;if(!i||n<1)return[];for(var a=0,o=0,c=e(Nr(i/n));a<i;)c[o++]=Mi(t,a,a+=n);return c},pe.compact=function(t){for(var n=-1,r=null==t?0:t.length,e=0,i=[];++n<r;){var u=t[n];u&&(i[e++]=u)}return i},pe.concat=function(){var t=arguments.length;if(!t)return[];for(var n=e(t-1),r=arguments[0],i=t;i--;)n[i-1]=arguments[i];return nr(mo(r)?ru(r):[r],Pe(n,1))},pe.cond=function(t){var n=null==t?0:t.length,r=Ru();return t=n?tr(t,function(t){if("function"!=typeof t[1])throw new un(c);return[r(t[0]),t[1]]}):[],Ai(function(r){for(var e=-1;++e<n;){var i=t[e];if(qn(i[0],this,r))return qn(i[1],this,r)}})},pe.conforms=function(t){return function(t){var n=ic(t);return function(r){return Le(r,t,n)}}(Re(t,h))},pe.constant=kc,pe.countBy=Wa,pe.create=function(t,n){var r=de(t);return null==n?r:ze(r,n)},pe.curry=function t(n,r,e){var i=Cu(n,b,u,u,u,u,u,r=e?u:r);return i.placeholder=t.placeholder,i},pe.curryRight=function t(n,r,e){var i=Cu(n,w,u,u,u,u,u,r=e?u:r);return i.placeholder=t.placeholder,i},pe.debounce=eo,pe.defaults=Yo,pe.defaultsDeep=Qo,pe.defer=io,pe.delay=uo,pe.difference=ha,pe.differenceBy=pa,pe.differenceWith=da,pe.drop=function(t,n,r){var e=null==t?0:t.length;return e?Mi(t,(n=r||n===u?1:Wo(n))<0?0:n,e):[]},pe.dropRight=function(t,n,r){var e=null==t?0:t.length;return e?Mi(t,0,(n=e-(n=r||n===u?1:Wo(n)))<0?0:n):[]},pe.dropRightWhile=function(t,n){return t&&t.length?Di(t,Ru(n,3),!0,!0):[]},pe.dropWhile=function(t,n){return t&&t.length?Di(t,Ru(n,3),!0):[]},pe.fill=function(t,n,r,e){var i=null==t?0:t.length;return i?(r&&"number"!=typeof r&&qu(t,n,r)&&(r=0,e=i),function(t,n,r,e){var i=t.length;for((r=Wo(r))<0&&(r=-r>i?0:i+r),(e=e===u||e>i?i:Wo(e))<0&&(e+=i),e=r>e?0:Uo(e);r<e;)t[r++]=n;return t}(t,n,r,e)):[]},pe.filter=function(t,n){return(mo(t)?Yn:Be)(t,Ru(n,3))},pe.flatMap=function(t,n){return Pe(Ka(t,n),1)},pe.flatMapDeep=function(t,n){return Pe(Ka(t,n),O)},pe.flatMapDepth=function(t,n,r){return r=r===u?1:Wo(r),Pe(Ka(t,n),r)},pe.flatten=ma,pe.flattenDeep=function(t){return null!=t&&t.length?Pe(t,O):[]},pe.flattenDepth=function(t,n){return null!=t&&t.length?Pe(t,n=n===u?1:Wo(n)):[]},pe.flip=function(t){return Cu(t,I)},pe.flow=Ec,pe.flowRight=Tc,pe.fromPairs=function(t){for(var n=-1,r=null==t?0:t.length,e={};++n<r;){var i=t[n];e[i[0]]=i[1]}return e},pe.functions=function(t){return null==t?[]:Ke(t,ic(t))},pe.functionsIn=function(t){return null==t?[]:Ke(t,uc(t))},pe.groupBy=qa,pe.initial=function(t){return null!=t&&t.length?Mi(t,0,-1):[]},pe.intersection=ya,pe.intersectionBy=ba,pe.intersectionWith=wa,pe.invert=nc,pe.invertBy=rc,pe.invokeMap=Ga,pe.iteratee=zc,pe.keyBy=Za,pe.keys=ic,pe.keysIn=uc,pe.map=Ka,pe.mapKeys=function(t,n){var r={};return n=Ru(n,3),Ge(t,function(t,e,i){je(r,n(t,e,i),t)}),r},pe.mapValues=function(t,n){var r={};return n=Ru(n,3),Ge(t,function(t,e,i){je(r,e,n(t,e,i))}),r},pe.matches=function(t){return pi(Re(t,h))},pe.matchesProperty=function(t,n){return di(t,Re(n,h))},pe.memoize=ao,pe.merge=ac,pe.mergeWith=oc,pe.method=jc,pe.methodOf=Oc,pe.mixin=$c,pe.negate=oo,pe.nthArg=function(t){return t=Wo(t),Ai(function(n){return gi(n,t)})},pe.omit=cc,pe.omitBy=function(t,n){return lc(t,oo(Ru(n)))},pe.once=function(t){return to(2,t)},pe.orderBy=function(t,n,r,e){return null==t?[]:(mo(n)||(n=null==n?[]:[n]),mo(r=e?u:r)||(r=null==r?[]:[r]),mi(t,n,r))},pe.over=Lc,pe.overArgs=co,pe.overEvery=Vc,pe.overSome=Nc,pe.partial=so,pe.partialRight=lo,pe.partition=Ja,pe.pick=sc,pe.pickBy=lc,pe.property=Fc,pe.propertyOf=function(t){return function(n){return null==t?u:Je(t,n)}},pe.pull=Aa,pe.pullAll=Ca,pe.pullAllBy=function(t,n,r){return t&&t.length&&n&&n.length?yi(t,n,Ru(r,2)):t},pe.pullAllWith=function(t,n,r){return t&&t.length&&n&&n.length?yi(t,n,u,r):t},pe.pullAt=Sa,pe.range=Dc,pe.rangeRight=Wc,pe.rearg=fo,pe.reject=function(t,n){return(mo(t)?Yn:Be)(t,oo(Ru(n,3)))},pe.remove=function(t,n){var r=[];if(!t||!t.length)return r;var e=-1,i=[],u=t.length;for(n=Ru(n,3);++e<u;){var a=t[e];n(a,e,t)&&(r.push(a),i.push(e))}return bi(t,i),r},pe.rest=function(t,n){if("function"!=typeof t)throw new un(c);return Ai(t,n=n===u?n:Wo(n))},pe.reverse=Ia,pe.sampleSize=function(t,n,r){return n=(r?qu(t,n,r):n===u)?1:Wo(n),(mo(t)?Se:Si)(t,n)},pe.set=function(t,n,r){return null==t?t:Ii(t,n,r)},pe.setWith=function(t,n,r,e){return e="function"==typeof e?e:u,null==t?t:Ii(t,n,r,e)},pe.shuffle=function(t){return(mo(t)?Ie:Ti)(t)},pe.slice=function(t,n,r){var e=null==t?0:t.length;return e?(r&&"number"!=typeof r&&qu(t,n,r)?(n=0,r=e):(n=null==n?0:Wo(n),r=r===u?e:Wo(r)),Mi(t,n,r)):[]},pe.sortBy=Ya,pe.sortedUniq=function(t){return t&&t.length?$i(t):[]},pe.sortedUniqBy=function(t,n){return t&&t.length?$i(t,Ru(n,2)):[]},pe.split=function(t,n,r){return r&&"number"!=typeof r&&qu(t,n,r)&&(n=r=u),(r=r===u?V:r>>>0)?(t=Ho(t))&&("string"==typeof n||null!=n&&!jo(n))&&!(n=Li(n))&&Sr(t)?Zi(jr(t),0,r):t.split(n,r):[]},pe.spread=function(t,n){if("function"!=typeof t)throw new un(c);return n=null==n?0:Hr(Wo(n),0),Ai(function(r){var e=r[n],i=Zi(r,0,n);return e&&nr(i,e),qn(t,this,i)})},pe.tail=function(t){var n=null==t?0:t.length;return n?Mi(t,1,n):[]},pe.take=function(t,n,r){return t&&t.length?Mi(t,0,(n=r||n===u?1:Wo(n))<0?0:n):[]},pe.takeRight=function(t,n,r){var e=null==t?0:t.length;return e?Mi(t,(n=e-(n=r||n===u?1:Wo(n)))<0?0:n,e):[]},pe.takeRightWhile=function(t,n){return t&&t.length?Di(t,Ru(n,3),!1,!0):[]},pe.takeWhile=function(t,n){return t&&t.length?Di(t,Ru(n,3)):[]},pe.tap=function(t,n){return n(t),t},pe.throttle=function(t,n,r){var e=!0,i=!0;if("function"!=typeof t)throw new un(c);return ko(r)&&(e="leading"in r?!!r.leading:e,i="trailing"in r?!!r.trailing:i),eo(t,n,{leading:e,maxWait:n,trailing:i})},pe.thru=Fa,pe.toArray=Fo,pe.toPairs=fc,pe.toPairsIn=hc,pe.toPath=function(t){return mo(t)?tr(t,sa):Ro(t)?[t]:ru(ca(Ho(t)))},pe.toPlainObject=Po,pe.transform=function(t,n,r){var e=mo(t),i=e||wo(t)||Lo(t);if(n=Ru(n,4),null==r){var u=t&&t.constructor;r=i?e?new u:[]:ko(t)&&Co(u)?de(jn(t)):{}}return(i?Zn:Ge)(t,function(t,e,i){return n(r,t,e,i)}),r},pe.unary=function(t){return Xa(t,1)},pe.union=ka,pe.unionBy=Ea,pe.unionWith=Ta,pe.uniq=function(t){return t&&t.length?Vi(t):[]},pe.uniqBy=function(t,n){return t&&t.length?Vi(t,Ru(n,2)):[]},pe.uniqWith=function(t,n){return n="function"==typeof n?n:u,t&&t.length?Vi(t,u,n):[]},pe.unset=function(t,n){return null==t||Ni(t,n)},pe.unzip=Ma,pe.unzipWith=za,pe.update=function(t,n,r){return null==t?t:Fi(t,n,Hi(r))},pe.updateWith=function(t,n,r,e){return e="function"==typeof e?e:u,null==t?t:Fi(t,n,Hi(r),e)},pe.values=pc,pe.valuesIn=function(t){return null==t?[]:_r(t,uc(t))},pe.without=ja,pe.words=Cc,pe.wrap=function(t,n){return so(Hi(n),t)},pe.xor=Oa,pe.xorBy=$a,pe.xorWith=Ra,pe.zip=La,pe.zipObject=function(t,n){return Bi(t||[],n||[],Ee)},pe.zipObjectDeep=function(t,n){return Bi(t||[],n||[],Ii)},pe.zipWith=Va,pe.entries=fc,pe.entriesIn=hc,pe.extend=Go,pe.extendWith=Zo,$c(pe,pe),pe.add=Pc,pe.attempt=Sc,pe.camelCase=dc,pe.capitalize=vc,pe.ceil=Hc,pe.clamp=function(t,n,r){return r===u&&(r=n,n=u),r!==u&&(r=(r=Bo(r))==r?r:0),n!==u&&(n=(n=Bo(n))==n?n:0),$e(Bo(t),n,r)},pe.clone=function(t){return Re(t,d)},pe.cloneDeep=function(t){return Re(t,h|d)},pe.cloneDeepWith=function(t,n){return Re(t,h|d,n="function"==typeof n?n:u)},pe.cloneWith=function(t,n){return Re(t,d,n="function"==typeof n?n:u)},pe.conformsTo=function(t,n){return null==n||Le(t,n,ic(n))},pe.deburr=gc,pe.defaultTo=function(t,n){return null==t||t!=t?n:t},pe.divide=qc,pe.endsWith=function(t,n,r){t=Ho(t),n=Li(n);var e=t.length,i=r=r===u?e:$e(Wo(r),0,e);return(r-=n.length)>=0&&t.slice(r,i)==n},pe.eq=ho,pe.escape=function(t){return(t=Ho(t))&&St.test(t)?t.replace(At,Ar):t},pe.escapeRegExp=function(t){return(t=Ho(t))&&Ot.test(t)?t.replace(jt,"\\$&"):t},pe.every=function(t,n,r){var e=mo(t)?Jn:We;return r&&qu(t,n,r)&&(n=u),e(t,Ru(n,3))},pe.find=Ua,pe.findIndex=va,pe.findKey=function(t,n){return ar(t,Ru(n,3),Ge)},pe.findLast=Ba,pe.findLastIndex=ga,pe.findLastKey=function(t,n){return ar(t,Ru(n,3),Ze)},pe.floor=Gc,pe.forEach=Pa,pe.forEachRight=Ha,pe.forIn=function(t,n){return null==t?t:He(t,Ru(n,3),uc)},pe.forInRight=function(t,n){return null==t?t:qe(t,Ru(n,3),uc)},pe.forOwn=function(t,n){return t&&Ge(t,Ru(n,3))},pe.forOwnRight=function(t,n){return t&&Ze(t,Ru(n,3))},pe.get=Xo,pe.gt=po,pe.gte=vo,pe.has=function(t,n){return null!=t&&Uu(t,n,ti)},pe.hasIn=tc,pe.head=_a,pe.identity=Mc,pe.includes=function(t,n,r,e){t=yo(t)?t:pc(t),r=r&&!e?Wo(r):0;var i=t.length;return r<0&&(r=Hr(i+r,0)),$o(t)?r<=i&&t.indexOf(n,r)>-1:!!i&&cr(t,n,r)>-1},pe.indexOf=function(t,n,r){var e=null==t?0:t.length;if(!e)return-1;var i=null==r?0:Wo(r);return i<0&&(i=Hr(e+i,0)),cr(t,n,i)},pe.inRange=function(t,n,r){return n=Do(n),r===u?(r=n,n=0):r=Do(r),function(t,n,r){return t>=qr(n,r)&&t<Hr(n,r)}(t=Bo(t),n,r)},pe.invoke=ec,pe.isArguments=go,pe.isArray=mo,pe.isArrayBuffer=_o,pe.isArrayLike=yo,pe.isArrayLikeObject=bo,pe.isBoolean=function(t){return!0===t||!1===t||Eo(t)&&Qe(t)==P},pe.isBuffer=wo,pe.isDate=xo,pe.isElement=function(t){return Eo(t)&&1===t.nodeType&&!zo(t)},pe.isEmpty=function(t){if(null==t)return!0;if(yo(t)&&(mo(t)||"string"==typeof t||"function"==typeof t.splice||wo(t)||Lo(t)||go(t)))return!t.length;var n=Wu(t);if(n==J||n==rt)return!t.size;if(Ju(t))return!si(t).length;for(var r in t)if(fn.call(t,r))return!1;return!0},pe.isEqual=function(t,n){return ui(t,n)},pe.isEqualWith=function(t,n,r){var e=(r="function"==typeof r?r:u)?r(t,n):u;return e===u?ui(t,n,u,r):!!e},pe.isError=Ao,pe.isFinite=function(t){return"number"==typeof t&&Ur(t)},pe.isFunction=Co,pe.isInteger=So,pe.isLength=Io,pe.isMap=To,pe.isMatch=function(t,n){return t===n||ai(t,n,Vu(n))},pe.isMatchWith=function(t,n,r){return r="function"==typeof r?r:u,ai(t,n,Vu(n),r)},pe.isNaN=function(t){return Mo(t)&&t!=+t},pe.isNative=function(t){if(Ku(t))throw new Qt(o);return oi(t)},pe.isNil=function(t){return null==t},pe.isNull=function(t){return null===t},pe.isNumber=Mo,pe.isObject=ko,pe.isObjectLike=Eo,pe.isPlainObject=zo,pe.isRegExp=jo,pe.isSafeInteger=function(t){return So(t)&&t>=-$&&t<=$},pe.isSet=Oo,pe.isString=$o,pe.isSymbol=Ro,pe.isTypedArray=Lo,pe.isUndefined=function(t){return t===u},pe.isWeakMap=function(t){return Eo(t)&&Wu(t)==at},pe.isWeakSet=function(t){return Eo(t)&&Qe(t)==ot},pe.join=function(t,n){return null==t?"":Br.call(t,n)},pe.kebabCase=mc,pe.last=xa,pe.lastIndexOf=function(t,n,r){var e=null==t?0:t.length;if(!e)return-1;var i=e;return r!==u&&(i=(i=Wo(r))<0?Hr(e+i,0):qr(i,e-1)),n==n?function(t,n,r){for(var e=r+1;e--;)if(t[e]===n)return e;return e}(t,n,i):or(t,lr,i,!0)},pe.lowerCase=_c,pe.lowerFirst=yc,pe.lt=Vo,pe.lte=No,pe.max=function(t){return t&&t.length?Ue(t,Mc,Xe):u},pe.maxBy=function(t,n){return t&&t.length?Ue(t,Ru(n,2),Xe):u},pe.mean=function(t){return fr(t,Mc)},pe.meanBy=function(t,n){return fr(t,Ru(n,2))},pe.min=function(t){return t&&t.length?Ue(t,Mc,fi):u},pe.minBy=function(t,n){return t&&t.length?Ue(t,Ru(n,2),fi):u},pe.stubArray=Uc,pe.stubFalse=Bc,pe.stubObject=function(){return{}},pe.stubString=function(){return""},pe.stubTrue=function(){return!0},pe.multiply=Kc,pe.nth=function(t,n){return t&&t.length?gi(t,Wo(n)):u},pe.noConflict=function(){return $n._===this&&($n._=gn),this},pe.noop=Rc,pe.now=Qa,pe.pad=function(t,n,r){t=Ho(t);var e=(n=Wo(n))?zr(t):0;if(!n||e>=n)return t;var i=(n-e)/2;return mu(Fr(i),r)+t+mu(Nr(i),r)},pe.padEnd=function(t,n,r){t=Ho(t);var e=(n=Wo(n))?zr(t):0;return n&&e<n?t+mu(n-e,r):t},pe.padStart=function(t,n,r){t=Ho(t);var e=(n=Wo(n))?zr(t):0;return n&&e<n?mu(n-e,r)+t:t},pe.parseInt=function(t,n,r){return r||null==n?n=0:n&&(n=+n),Zr(Ho(t).replace(Rt,""),n||0)},pe.random=function(t,n,r){if(r&&"boolean"!=typeof r&&qu(t,n,r)&&(n=r=u),r===u&&("boolean"==typeof n?(r=n,n=u):"boolean"==typeof t&&(r=t,t=u)),t===u&&n===u?(t=0,n=1):(t=Do(t),n===u?(n=t,t=0):n=Do(n)),t>n){var e=t;t=n,n=e}if(r||t%1||n%1){var i=Kr();return qr(t+i*(n-t+Mn("1e-"+((i+"").length-1))),n)}return wi(t,n)},pe.reduce=function(t,n,r){var e=mo(t)?rr:dr,i=arguments.length<3;return e(t,Ru(n,4),r,i,Fe)},pe.reduceRight=function(t,n,r){var e=mo(t)?er:dr,i=arguments.length<3;return e(t,Ru(n,4),r,i,De)},pe.repeat=function(t,n,r){return n=(r?qu(t,n,r):n===u)?1:Wo(n),xi(Ho(t),n)},pe.replace=function(){var t=arguments,n=Ho(t[0]);return t.length<3?n:n.replace(t[1],t[2])},pe.result=function(t,n,r){var e=-1,i=(n=qi(n,t)).length;for(i||(i=1,t=u);++e<i;){var a=null==t?u:t[sa(n[e])];a===u&&(e=i,a=r),t=Co(a)?a.call(t):a}return t},pe.round=Jc,pe.runInContext=t,pe.sample=function(t){return(mo(t)?Ce:Ci)(t)},pe.size=function(t){if(null==t)return 0;if(yo(t))return $o(t)?zr(t):t.length;var n=Wu(t);return n==J||n==rt?t.size:si(t).length},pe.snakeCase=bc,pe.some=function(t,n,r){var e=mo(t)?ir:zi;return r&&qu(t,n,r)&&(n=u),e(t,Ru(n,3))},pe.sortedIndex=function(t,n){return ji(t,n)},pe.sortedIndexBy=function(t,n,r){return Oi(t,n,Ru(r,2))},pe.sortedIndexOf=function(t,n){var r=null==t?0:t.length;if(r){var e=ji(t,n);if(e<r&&ho(t[e],n))return e}return-1},pe.sortedLastIndex=function(t,n){return ji(t,n,!0)},pe.sortedLastIndexBy=function(t,n,r){return Oi(t,n,Ru(r,2),!0)},pe.sortedLastIndexOf=function(t,n){if(null!=t&&t.length){var r=ji(t,n,!0)-1;if(ho(t[r],n))return r}return-1},pe.startCase=wc,pe.startsWith=function(t,n,r){return t=Ho(t),r=null==r?0:$e(Wo(r),0,t.length),n=Li(n),t.slice(r,r+n.length)==n},pe.subtract=Yc,pe.sum=function(t){return t&&t.length?vr(t,Mc):0},pe.sumBy=function(t,n){return t&&t.length?vr(t,Ru(n,2)):0},pe.template=function(t,n,r){var e=pe.templateSettings;r&&qu(t,n,r)&&(n=u),t=Ho(t),n=Zo({},n,e,Su);var i,a,o=Zo({},n.imports,e.imports,Su),c=ic(o),s=_r(o,c),l=0,f=n.interpolate||Jt,h="__p += '",p=rn((n.escape||Jt).source+"|"+f.source+"|"+(f===Et?Ut:Jt).source+"|"+(n.evaluate||Jt).source+"|$","g"),d="//# sourceURL="+("sourceURL"in n?n.sourceURL:"lodash.templateSources["+ ++In+"]")+"\n";t.replace(p,function(n,r,e,u,o,c){return e||(e=u),h+=t.slice(l,c).replace(Yt,Cr),r&&(i=!0,h+="' +\n__e("+r+") +\n'"),o&&(a=!0,h+="';\n"+o+";\n__p += '"),e&&(h+="' +\n((__t = ("+e+")) == null ? '' : __t) +\n'"),l=c+n.length,n}),h+="';\n";var v=n.variable;v||(h="with (obj) {\n"+h+"\n}\n"),h=(a?h.replace(yt,""):h).replace(bt,"$1").replace(wt,"$1;"),h="function("+(v||"obj")+") {\n"+(v?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+h+"return __p\n}";var g=Sc(function(){return Xt(c,d+"return "+h).apply(u,s)});if(g.source=h,Ao(g))throw g;return g},pe.times=function(t,n){if((t=Wo(t))<1||t>$)return[];var r=V,e=qr(t,V);n=Ru(n),t-=V;for(var i=gr(e,n);++r<t;)n(r);return i},pe.toFinite=Do,pe.toInteger=Wo,pe.toLength=Uo,pe.toLower=function(t){return Ho(t).toLowerCase()},pe.toNumber=Bo,pe.toSafeInteger=function(t){return t?$e(Wo(t),-$,$):0===t?t:0},pe.toString=Ho,pe.toUpper=function(t){return Ho(t).toUpperCase()},pe.trim=function(t,n,r){if((t=Ho(t))&&(r||n===u))return t.replace($t,"");if(!t||!(n=Li(n)))return t;var e=jr(t),i=jr(n);return Zi(e,br(e,i),wr(e,i)+1).join("")},pe.trimEnd=function(t,n,r){if((t=Ho(t))&&(r||n===u))return t.replace(Lt,"");if(!t||!(n=Li(n)))return t;var e=jr(t);return Zi(e,0,wr(e,jr(n))+1).join("")},pe.trimStart=function(t,n,r){if((t=Ho(t))&&(r||n===u))return t.replace(Rt,"");if(!t||!(n=Li(n)))return t;var e=jr(t);return Zi(e,br(e,jr(n))).join("")},pe.truncate=function(t,n){var r=k,e=E;if(ko(n)){var i="separator"in n?n.separator:i;r="length"in n?Wo(n.length):r,e="omission"in n?Li(n.omission):e}var a=(t=Ho(t)).length;if(Sr(t)){var o=jr(t);a=o.length}if(r>=a)return t;var c=r-zr(e);if(c<1)return e;var s=o?Zi(o,0,c).join(""):t.slice(0,c);if(i===u)return s+e;if(o&&(c+=s.length-c),jo(i)){if(t.slice(c).search(i)){var l,f=s;for(i.global||(i=rn(i.source,Ho(Bt.exec(i))+"g")),i.lastIndex=0;l=i.exec(f);)var h=l.index;s=s.slice(0,h===u?c:h)}}else if(t.indexOf(Li(i),c)!=c){var p=s.lastIndexOf(i);p>-1&&(s=s.slice(0,p))}return s+e},pe.unescape=function(t){return(t=Ho(t))&&Ct.test(t)?t.replace(xt,Or):t},pe.uniqueId=function(t){var n=++hn;return Ho(t)+n},pe.upperCase=xc,pe.upperFirst=Ac,pe.each=Pa,pe.eachRight=Ha,pe.first=_a,$c(pe,(Zc={},Ge(pe,function(t,n){fn.call(pe.prototype,n)||(Zc[n]=t)}),Zc),{chain:!1}),pe.VERSION="4.17.11",Zn(["bind","bindKey","curry","curryRight","partial","partialRight"],function(t){pe[t].placeholder=pe}),Zn(["drop","take"],function(t,n){me.prototype[t]=function(r){r=r===u?1:Hr(Wo(r),0);var e=this.__filtered__&&!n?new me(this):this.clone();return e.__filtered__?e.__takeCount__=qr(r,e.__takeCount__):e.__views__.push({size:qr(r,V),type:t+(e.__dir__<0?"Right":"")}),e},me.prototype[t+"Right"]=function(n){return this.reverse()[t](n).reverse()}}),Zn(["filter","map","takeWhile"],function(t,n){var r=n+1,e=r==z||3==r;me.prototype[t]=function(t){var n=this.clone();return n.__iteratees__.push({iteratee:Ru(t,3),type:r}),n.__filtered__=n.__filtered__||e,n}}),Zn(["head","last"],function(t,n){var r="take"+(n?"Right":"");me.prototype[t]=function(){return this[r](1).value()[0]}}),Zn(["initial","tail"],function(t,n){var r="drop"+(n?"":"Right");me.prototype[t]=function(){return this.__filtered__?new me(this):this[r](1)}}),me.prototype.compact=function(){return this.filter(Mc)},me.prototype.find=function(t){return this.filter(t).head()},me.prototype.findLast=function(t){return this.reverse().find(t)},me.prototype.invokeMap=Ai(function(t,n){return"function"==typeof t?new me(this):this.map(function(r){return ei(r,t,n)})}),me.prototype.reject=function(t){return this.filter(oo(Ru(t)))},me.prototype.slice=function(t,n){t=Wo(t);var r=this;return r.__filtered__&&(t>0||n<0)?new me(r):(t<0?r=r.takeRight(-t):t&&(r=r.drop(t)),n!==u&&(r=(n=Wo(n))<0?r.dropRight(-n):r.take(n-t)),r)},me.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},me.prototype.toArray=function(){return this.take(V)},Ge(me.prototype,function(t,n){var r=/^(?:filter|find|map|reject)|While$/.test(n),e=/^(?:head|last)$/.test(n),i=pe[e?"take"+("last"==n?"Right":""):n],a=e||/^find/.test(n);i&&(pe.prototype[n]=function(){var n=this.__wrapped__,o=e?[1]:arguments,c=n instanceof me,s=o[0],l=c||mo(n),f=function(t){var n=i.apply(pe,nr([t],o));return e&&h?n[0]:n};l&&r&&"function"==typeof s&&1!=s.length&&(c=l=!1);var h=this.__chain__,p=!!this.__actions__.length,d=a&&!h,v=c&&!p;if(!a&&l){n=v?n:new me(this);var g=t.apply(n,o);return g.__actions__.push({func:Fa,args:[f],thisArg:u}),new ge(g,h)}return d&&v?t.apply(this,o):(g=this.thru(f),d?e?g.value()[0]:g.value():g)})}),Zn(["pop","push","shift","sort","splice","unshift"],function(t){var n=an[t],r=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",e=/^(?:pop|shift)$/.test(t);pe.prototype[t]=function(){var t=arguments;if(e&&!this.__chain__){var i=this.value();return n.apply(mo(i)?i:[],t)}return this[r](function(r){return n.apply(mo(r)?r:[],t)})}}),Ge(me.prototype,function(t,n){var r=pe[n];if(r){var e=r.name+"";(ie[e]||(ie[e]=[])).push({name:n,func:r})}}),ie[pu(u,_).name]=[{name:"wrapper",func:u}],me.prototype.clone=function(){var t=new me(this.__wrapped__);return t.__actions__=ru(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=ru(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=ru(this.__views__),t},me.prototype.reverse=function(){if(this.__filtered__){var t=new me(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},me.prototype.value=function(){var t=this.__wrapped__.value(),n=this.__dir__,r=mo(t),e=n<0,i=r?t.length:0,u=function(t,n,r){for(var e=-1,i=r.length;++e<i;){var u=r[e],a=u.size;switch(u.type){case"drop":t+=a;break;case"dropRight":n-=a;break;case"take":n=qr(n,t+a);break;case"takeRight":t=Hr(t,n-a)}}return{start:t,end:n}}(0,i,this.__views__),a=u.start,o=u.end,c=o-a,s=e?o:a-1,l=this.__iteratees__,f=l.length,h=0,p=qr(c,this.__takeCount__);if(!r||!e&&i==c&&p==c)return Wi(t,this.__actions__);var d=[];t:for(;c--&&h<p;){for(var v=-1,g=t[s+=n];++v<f;){var m=l[v],_=m.iteratee,y=m.type,b=_(g);if(y==j)g=b;else if(!b){if(y==z)continue t;break t}}d[h++]=g}return d},pe.prototype.at=Da,pe.prototype.chain=function(){return Na(this)},pe.prototype.commit=function(){return new ge(this.value(),this.__chain__)},pe.prototype.next=function(){this.__values__===u&&(this.__values__=Fo(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?u:this.__values__[this.__index__++]}},pe.prototype.plant=function(t){for(var n,r=this;r instanceof ve;){var e=fa(r);e.__index__=0,e.__values__=u,n?i.__wrapped__=e:n=e;var i=e;r=r.__wrapped__}return i.__wrapped__=t,n},pe.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof me){var n=t;return this.__actions__.length&&(n=new me(this)),(n=n.reverse()).__actions__.push({func:Fa,args:[Ia],thisArg:u}),new ge(n,this.__chain__)}return this.thru(Ia)},pe.prototype.toJSON=pe.prototype.valueOf=pe.prototype.value=function(){return Wi(this.__wrapped__,this.__actions__)},pe.prototype.first=pe.prototype.head,Fn&&(pe.prototype[Fn]=function(){return this}),pe}();$n._=$r,(i=function(){return $r}.call(n,r,n,e))===u||(e.exports=i)}).call(this)}).call(this,r(4),r(5)(t))},function(t,n){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,n){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},,function(t,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var e=r(2),i=r(0),u=r(1),a=function(){function t(t,n){this.variableName=t,this.targetValue=n}return t.prototype.check=function(t){var n=t.varLookup(this.variableName);return n&&n.value.equals(this.targetValue)},t.prototype.visualize_html=function(t){var n=this.check(t);return'\n            <div style="position: relative">\n                <span class="badge matlab-var-badge">'+this.variableName+'</span>\n                <div class="matcrab-visualization">'+this.targetValue.visualize_html()+'</div>\n                <div class="matcrab-variable-exercise-status">'+(n?'<span class="glyphicon glyphicon-ok matcrab-complete-glyphicon"></span>':'<span class="glyphicon glyphicon-option-horizontal matcrab-incomplete-glyphicon"></span>')+"</div>\n            </div>\n        "},t}(),o=function(){function t(t,n,r,e,i){this.elem=t,this.env=n,this.exercises=Object.keys(r).map(function(t){return new a(t,r[t])}),this.description=e,this.solutionMessage=i,n.addListener(this),this.elem.html(this.visualize_html())}return t.prototype.onVariableSet=function(t){var n=this;this.exercises.forEach(function(r){r.variableName===t.name&&n.elem.html(n.visualize_html())})},t.prototype.check=function(){var t=this;return this.exercises.every(function(n){return n.check(t.env)})},t.prototype.visualize_html=function(){var t=this;return"\n        "+(this.description?'<div style="text-align:center">'+this.description+"</div>":"")+"\n        <table>\n            <tr>\n                "+this.exercises.reduce(function(n,r){return n+"<td>"+r.visualize_html(t.env)+"</td>"},"")+"\n            </tr>\n        </table>\n        "+(this.solutionMessage&&this.check()?'<div class="alert alert-success" style="text-align:center">'+this.solutionMessage+"</div>":"")},t}();function c(t,n,r){try{if(t.length>0){var i=u.parse(t),a=e.CodeConstruct.create(i,n);a.execute();r.html(a.visualize_html())}}catch(t){if("SyntaxError"!==t.name)throw r.html("Sorry, an unexpected MatCrab error occurred. Please report to jjuett@umich.edu."),t;r.html("Syntax Error")}}function s(t,n,r){var e;t.keypress(function(i){if(13==(i.keyCode||i.which)&&!i.shiftKey){i.preventDefault();return clearTimeout(e),e=setTimeout(function(){if(void 0!==t.val()){var e=t.val().trim();n.empty(),c(e,r,n)}},500),!1}})}function l(t,n,r,e){var i;t.click(function(t){t.preventDefault();return clearTimeout(i),i=setTimeout(function(){if(void 0!==n.val()){var t=n.val().trim();r.empty(),c(t,e,r)}},500),!1})}function f(t){return t.trim().split("\n").map(function(t){return t.trim()}).join("\n")}function h(){$(".matcrab-variable-target-exercise").filter(function(){return!$(this).data("rendered")}).each(function(){var t,n,r={};$(this).find(".matcrab-variable-target").each(function(){var t=$(this),n=f(t.html()),a=u.parse(n),o=new e.Environment,c=e.CodeConstruct.create(a,o).execute();i.assert("success"===c.kind),r[t.data("name")]=c.value}).remove();var a=null!==(t=$(this).find(".matcrab-exercise-question").html())&&void 0!==t?t:"";a=a.trim(),$(this).find(".matcrab-exercise-question").remove();var c=null!==(n=$(this).find(".matcrab-exercise-complete").html())&&void 0!==n?n:"";c=c.trim(),$(this).find(".matcrab-exercise-complete").remove();var h=new e.Environment($(this).find(".matcrab-workspace")),p=f($(this).find(".matcrab-setup").html()||""),d=u.parse(p);(!d.statements||d.statements.length>0)&&e.CodeConstruct.create(d,h).execute(),$(this).find(".matcrab-setup").remove(),new o($(this).find(".matcrab-exercise-status"),h,r,a,c);var v=$(this).find(".matcrab-reset"),g=$(this).find(".matcrab-run"),m=$(this).find(".matcrab-entry"),_=$(this).find(".matcrab-vis");s(m,_,h),l(g,m,_,h),v.on("click",function(t){h.clear(),(!d.statements||d.statements.length>0)&&e.CodeConstruct.create(d,h).execute()})}).data("rendered",!0),$(".matcrab-vis-exp").filter(function(){return!$(this).data("rendered")}).each(function(){var t=$(this).html();t=f(t),console.log(t);var n=u.parse(t),r=new e.Environment,i=e.CodeConstruct.create(n,r);i.execute(),$(this).html(i.visualize_html())}).data("rendered",!0),$(".matcrab-example").filter(function(){return!$(this).data("rendered")}).each(function(){var t=this,n=$(this).find(".matcrab-reset"),r=$(this).find(".matcrab-run"),i=$(this).find(".matcrab-entry"),a=$(this).find(".matcrab-vis"),o=new e.Environment($(this).find(".matcrab-workspace")),h=f($(this).find(".matcrab-setup").html()||""),p=u.parse(h);(!p.statements||p.statements.length>0)&&e.CodeConstruct.create(p,o).execute(),$(this).find(".matcrab-setup").remove();var d=i.val();"string"==typeof d&&i.val(f(d));var v="";void 0!==i.val()&&(v=i.val().trim(),a.empty(),c(v,o,a)),s(i,a,o),l(r,i,a,o),n.on("click",function(n){$(t).find(".matcrab-workspace").empty(),o=new e.Environment($(t).find(".matcrab-workspace")),(!p.statements||p.statements.length>0)&&e.CodeConstruct.create(p,o).execute(),i.val(v),a.empty(),c(v,o,a)})}).data("rendered",!0)}$(document).ready(h),setTimeout(h,1e3),setTimeout(h,2e3),setTimeout(h,5e3),setTimeout(h,1e4)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,